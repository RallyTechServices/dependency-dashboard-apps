<!DOCTYPE html>
<html>
<head>
    <title>TS Status Report</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Wed Aug 03 2016 14:08:08 GMT-0700 (PDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Wed Aug 03 2016 14:08:08 GMT-0700 (PDT)";
        var BUILDER = "jmartin";
        var CHECKSUM = 272986734586;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("CA.techservices.picker.PortfolioItemPicker", {
        extend: "Ext.container.Container",
        alias: "widget.portfolioitempickerbutton",

        requires: [
            'Deft.Deferred',
            'Rally.util.Test',
            'Rally.ui.EmptyTextFactory',
            'Rally.ui.dialog.ChooserDialog',
            'Rally.data.wsapi.Store'
        ],

        emptyText: '<p>No portfolio items match your search criteria.</p>',

        items: [
            {
                xtype: "container",
                name: "portfolioItemPicker",
                layout: {
                    type: "hbox"
                },
                items: [
                    {

                        xtype: 'rallybutton',
                        text: 'Step 1: Choose Business Theme / Initiative',
                        itemId: 'portfolioItemButton',
                        cls: 'piButton primary small'
                    },
                    {
                        xtype: 'container',
                        items: [
                            {
                                xtype: 'container',
                                itemId: 'portfolioItemDisplay',
                                value: "&nbsp;"
                            }
                        ]
                    }

                ]
            }
        ],

        initComponent: function () {
            this.callParent(arguments);
        },
        
        beforeRender: function () {
            this._configureButton();
            this._configurePicker();
        },

        _configureButton: function () {
            this.down('#portfolioItemButton').on('click', this._onButtonClick, this);
        },

        _configurePicker: function () {
            //this._setValueFromSettings();
            this._loadPortfolioItems();
        },

        _setValueFromSettings: function () {
            var newSettingsValue = this.settingsParent.app.getSetting("portfolioItemPicker"),
                oldSettingsValue = this.settingsParent.app.getSetting("buttonchooser");

            if (this._isSettingValid(newSettingsValue)) {
                this.setValue(newSettingsValue);
            } else if (this._isSettingValid(oldSettingsValue)) {
                this.setValue(Ext.JSON.decode(oldSettingsValue).artifact._ref);
            } else {
                this.setValue("&nbsp;");
            }
        },

        _isSettingValid: function (value) {
            return value && value !== "undefined";
        },

        _loadPortfolioItems: function () {
            if (this._isSavedValueValid()) {
                this._createPortfolioItemStore();
            }
        },

        _createPortfolioItemStore: function () {
            if ( Ext.isEmpty(this.value) || this.value.length === 0 ) {
                return;
            }
            var filters = Rally.data.wsapi.Filter.or(
                Ext.Array.map(this.value,function(pi_ref){
                    return {
                        property: "ObjectID",
                        operator: "=",
                        value: Rally.util.Ref.getOidFromRef(pi_ref)
                    };
                })
            );
            
            Ext.create("Rally.data.wsapi.Store", {
                model: Ext.identityFn("Portfolio Item"),
                filters: filters,
                context: this.requestContext,
                autoLoad: true,
                listeners: {
                    load: this._onPortfolioItemsRetrieved,
                    scope: this
                }
            });
        },

        _isSavedValueValid: function () {
            return Ext.isArray(this.value) && this.value !== "undefined";
        },

        _onPortfolioItemsRetrieved: function (store,records) {
            this._handleStoreResults(records);
        },

        _setDisplayValue: function () {
            var container = this.down('#portfolioItemDisplay');
            container.removeAll();
            container.add(this._getPortfolioItemDisplay());
        },

        _onButtonClick: function () {
            this._destroyChooser();

            this.dialog = Ext.create("CA.techservices.dialog.TypedArtifactChooserDialog", this._getChooserConfig());
            this.dialog.show();
        },

        _destroyChooser: function () {
            if (this.dialog) {
                this.dialog.destroy();
            }
        },

        _getPortfolioItemDisplay: function () {
            if ( Ext.isEmpty(this.portfolioItems) ) {
                this.portfolioItems = [];
                return;
            }
            if ( ! Ext.isArray(this.portfolioItems) ) {
                this.portfolioItems = [this.portfolioItems];
            }
            
            return Ext.Array.map(this.portfolioItems, function(pi){
                //var text = Ext.String.format("{0}: {1} <span class='icon-delete'></span>", pi.FormattedID, pi.Name);
                var text = Ext.String.format("{0}: {1}", pi.FormattedID, pi.Name);
                return {
                    xtype:'button',
                    
//                    cls: 'pi-delete-button',
                    cls: 'pi-button',
                    text: text
//                    listeners: {
//                        scope: this, 
//                        click: function() {
//                            this._removeItem(pi);
//                        }
//                    }
                };
            },this);
        },

        _removeItem: function(record) {
            this.portfolioItems = Ext.Array.filter(this.portfolioItems, function(pi){
                return ( record.FormattedID != pi.FormattedID );
            });
            
            this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) { return pi._ref; });
            this.setValue(this.portfolioItemRefs);

            this._setDisplayValue();
        },
        
        _onPortfolioItemChosen: function (dialog,foundItems) {
            var found_array = foundItems;
            if ( !Ext.isArray(foundItems) ) { found_array = [foundItems]; }
            var existing_items = this.portfolioItems || [];
            
            //var all_items = Ext.Array.merge(found_array, existing_items);
            var all_items = found_array;
            
            this._handleStoreResults(all_items);
            this.fireEvent('itemschosen',this,all_items);
            this._destroyChooser();
        },
        
        _filterUniquePIs: function(items) {
            var hash = {};
            Ext.Array.each(items, function(item) {
                var ref = item._ref || item.get('_ref');
                hash[ref] = item;
            });
            
            return Ext.Object.getValues(hash);
        },

        _handleStoreResults: function(store) {
            if (store) {
                if ( Ext.isArray(store) ) {
                    var pis = Ext.Array.map(store, function(pi) { 
                        if ( !Ext.isEmpty(pi) && Ext.isFunction(pi.getData) ) {
                            return pi.getData();
                        }
                        return pi;
                    });
                    
                    this.portfolioItems = this._filterUniquePIs(pis);
                    
                    this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) {
                        return pi._ref;
                    });
                    
                    this._setDisplayValue();
                    this.setValue(this.portfolioItemRefs);
                } else if (store.data) {
                    this.portfolioItem = store.data;
                    this._setDisplayValue();
                    this.setValue(this.portfolioItem._ref);
                }
            }
        },

        _getChooserConfig: function () {
            return {
                artifactTypes: ['portfolioitem/initiative','portfolioitem/theme'],
                multiple: false,
                height: 350,
                title: 'Choose Portfolio Item to Add',
                closeAction: 'destroy',
                selectionButtonText: 'Select',
                _isArtifactEditable: function(record) {
                    return true;
                },
                listeners: {
                    artifactChosen: this._onPortfolioItemChosen,
                    scope: this
                },
                storeConfig: {
                    project: null,
                    context: this.requestContext,
                    fetch: ['ObjectID','Project','WorkSpace','FormattedID','Name','ActualStartDate','PlannedStartDate','ActualEndDate','PlannedEndDate']
                },
                gridConfig: {
                    viewConfig: {
                        emptyText: Rally.ui.EmptyTextFactory.getEmptyTextFor(this.emptyText),
                        getRowClass: function(record) {
                            return Rally.util.Test.toBrowserTestCssClass('row', record.getId()) + '';
                        }
                    }
                }
            };
        },

        setValue: function (value) {
            
            if (value && value !== "undefined") {
                if ( Ext.isString(value) ) {
                    value = value.split(',');
                }
                this.value = value;
            }
            else {
                this.value = this.settingsParent.app.getSetting("portfolioItemPicker");
            }
        },

        getSubmitData: function () {
            var returnObject = {};

            if ( this.portfolioItemRefs && Ext.isArray(this.portfolioItemRefs) ) {
                this.setValue(this.portfolioItemRefs);
                returnObject.portfolioItemPicker = this.portfolioItemRefs;                
            } else if (this.portfolioItem) {

                this.setValue(this.portfolioItem._ref);
                returnObject.portfolioItemPicker = this.portfolioItem._ref;
            }
            else {
                returnObject.portfolioItemPicker = "";
            }

            return returnObject;
        }
    });
}());

Ext.define('CA.techservices.row.DependencyRow',{
    extend: 'Ext.data.Model',
    
    fields: [
        { name: 'ObjectID', type:'integer' },
        { name: 'Grandparent', type:'object' },
        { name: 'Parent', type: 'object' },
        { name: 'FormattedID', type: 'string' },
        { name: 'Name', type:'string' },
        { name: 'State', type:'object' },
        { name: 'Project', type:'object' },
        { name: 'Owner', type:'object' },
        { name: 'Milestones', type:'object' },
        { name: 'PlannedEndDate', type: 'object' },
        { name: 'PlannedStartDate', type: 'object' },
        { name: 'ActualStartDate', type: 'object' },
        { name: 'ActualEndDate', type: 'object' },
        { name: 'LeafStoryCount', type:'integer' },
        { name: 'LeafStoryPlanEstimateTotal', type: 'float' },
        { name: 'PercentDoneByStoryCount', type: 'float', defaultValue: -1 },
        { name: 'PercentDoneByStoryPlanEstimate', type: 'float', defaultValue: -1 },
        { name: '__RelatedRecords', type:'auto'},
        { name: 'Release', type:'object' },
        { name: 'Item', type:'object'},
        
        { name: 'BusinessItem', type: 'object', convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                return record.get('Item');
            }
        },
        
        { name: '_type', type: 'string' },
        { name: '_ref', type: 'string' },
        
            { name: '_stories', type:'object'},
            { name: 'PreliminaryState', type: 'object' }, 
        
        { name: '_Level', type: 'integer', defaultValue: 0 },
        
        { name: '__Type', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var level = record.get('_Level');
                
                if ( level === 0 ) { return "Business"; }
                return "Platform";
            }
        },
        
        { name: '__GrandparentFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Grandparent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID;
            }
        },
        
        { name: '__GrandparentName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Grandparent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null
            }
        },
        
        { name: '__ParentFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Parent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__ParentName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Parent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__ItemFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Item');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__ItemName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Item');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__BusinessItemFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('BusinessItem');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__BusinessItemName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('BusinessItem');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__LeafStoryCount', type:'integer', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('LeafStoryCount') || 0;
        }},
        { name: '__LeafStoryPlanEstimateTotal', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('LeafStoryPlanEstimateTotal') || 0;
        } },
        { name: '__PercentDoneByStoryCount', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PercentDoneByStoryCount') || 0;
        } },
        { name: '__PercentDoneByStoryPlanEstimate', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PercentDoneByStoryPlanEstimate') || 0;
        } }
    ],
    
    addRelatedRecord: function( record ) {
        var records = this.get('__RelatedRecords') || [];
        var new_record_oid = record.get('ObjectID');
        var ok_to_add = true;
        Ext.Array.each(records, function(record){
            if ( record.get('ObjectID') == new_record_oid ) {
                ok_to_add = false;
            }
        });
        
        if ( ok_to_add ) {
            records.push(record);
        }
//        
//        console.log(this.get('FormattedID'), record.get('FormattedID'), 'related records: ', records, this.get('__RelatedRecords'));
//        
          this.set('__RelatedRecords', records);
//        
        this.set('__LeafStoryCount',0);
        
        var my_count = this.get('LeafStoryCount');
        var my_count_ratio = this.get('PercentDoneByStoryCount');
        var my_size = this.get('LeafStoryPlanEstimateTotal');
        var my_size_ratio = this.get('PercentDoneByStoryPlanEstimate');
        
        var counts = Ext.Array.map(records, function(record){ return record.get('LeafStoryCount') || 0 });
        this.set('__LeafStoryCount', Ext.Array.sum(counts) + my_count);
        
        var sizes = Ext.Array.map(records, function(record){ return record.get('LeafStoryPlanEstimateTotal') || 0 });
        this.set('__LeafStoryPlanEstimateTotal', Ext.Array.sum(sizes) + my_size );
        
        var accepted_counts = Ext.Array.map(records, function(record){
            var count = record.get('LeafStoryCount') || 0;
            var ratio = record.get('PercentDoneByStoryCount') || 0;
            
            return count * ratio;
        });
        var my_accepted_count = my_count * my_count_ratio;
        
        var count_ratio = 0;
        if ( this.get('__LeafStoryCount') > 0 ) {
            count_ratio = ( Ext.Array.sum(accepted_counts) + my_accepted_count ) / this.get('__LeafStoryCount');
        }
        
        this.set('__PercentDoneByStoryCount', count_ratio);
        
        var accepted_sizes = Ext.Array.map(records, function(record){
            var count = record.get('LeafStoryPlanEstimateTotal') || 0;
            var ratio = record.get('PercentDoneByStoryPlanEstimate') || 0;
            
            return count * ratio;
        });
        var my_accepted_size = my_size * my_size_ratio;
        
        var size_ratio = 0;
        if ( this.get('__LeafStoryPlanEstimateTotal') > 0 ) {
            size_ratio = ( Ext.Array.sum(accepted_sizes) + my_accepted_size ) / this.get('__LeafStoryPlanEstimateTotal');
        }
        
        this.set('__PercentDoneByStoryPlanEstimate', size_ratio);
    }
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.techservices.dialog.TypedArtifactChooserDialog', {
    extend: 'Rally.ui.dialog.ArtifactChooserDialog',
    alias: 'widget.tstypedartifactchooserdialog',

    getGridModels: function() {
        return this.chosenTypes || this.artifactTypes;
    },
    
    getSearchBarItems: function() {
        var me = this,
            items = [],
            types = this.artifactTypes;
            
        this.chosenTypes = [ this.artifactTypes[0] ];
        
        if ( !Ext.isEmpty(types) && types.length > 1 ) {
            var store = Ext.create('Rally.data.custom.Store',{
                xtype:'rallycustom',
                autoLoad: true,
                data: Ext.Array.map(types, function(type) {
                    var type_name = type.replace(/.*\//,'');
                    
                    return {_refObjectName:type_name, _ref:type};
                })
            });
            
            items.push({
                xtype:'rallycombobox',
                store: store,
                listeners: {
                    select: function(cb) {
                        me.chosenTypes = [ cb.getValue() ];
                        me.selectionCache = [];
                        me._enableDoneButton();
                        me.buildGrid();
                    }
                }
            });
        }
        
        items.push({
            xtype: 'triggerfield',
            cls: 'rui-triggerfield chooser-search-terms',
            emptyText: 'Search Keyword or ID',
            enableKeyEvents: true,
            flex: 1,
            itemId: 'searchTerms',
            listeners: {
                keyup: function (textField, event) {
                    if (event.getKey() === Ext.EventObject.ENTER) {
                        this._search();
                    }
                },
                afterrender: function (field) {
                    field.focus();
                },
                scope: this
            },
            triggerBaseCls: 'icon-search chooser-search-icon'
        });
        
        return items;
    }
});
/*
 * given a set of records, go get more information for them
 */
 
Ext.define('CA.techservices.DeepExporter',{
    config: {
        /*
         * An array of records
         */
        records: [],
        MilestonesByOID: {},
        TypeField: null,
        PlatformCapabilityField: null
    },
    
    constructor: function(config) {
        config = config || {};
        this.mergeConfig(config);
    },
    
    gatherDescendantInformation: function() {
        var me = this,
            records = this.records;
        // assume that the row represents a portfolio item of some sort
        
        var promises = Ext.Array.map(records, function(record){
            return [
                function() {
                    return me.getDependencyCounts(record,record.get('Item'));
                },
                function() {
                    return me.getDependencyCounts(record,record.get('Parent'));
                },
                function() {
                    return me.getDependencyCounts(record,record.get('Grandparent'));
                },
                function() {
                    return me.gatherDescendantsForPI(record);
                }
            ]
        });
        
        return Deft.Chain.sequence(Ext.Array.flatten(promises),this);
    },
    
    getDependencyCounts: function(record,item) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        if ( Ext.isEmpty(item.Predecessors) || Ext.isEmpty(item.Predecessors.Count) ) {
            return [];
        }
        if ( Ext.isEmpty(item.Successors) || Ext.isEmpty(item.Successors.Count) ) {
            return [];
        }
        
        if ( item.Successors.Count === 0 && item.Predecessors.Count === 0 ) {
            return [];
        }
        
        var oid = item.ObjectID;
        var model = item._type;
        
        Ext.create('Rally.data.wsapi.Store', {
            model: model,
            fetch: ['Predecessors','Successors'],
            pageSize: 1,
            filters: [{property:'ObjectID',value:oid}],
            context: { project: null },
            autoLoad: true,
            listeners: {
                load: function(store, records) {
                    records[0].getCollection('Predecessors').load({
                        fetch: [me.TypeField],
                        callback: function(predecessors) {
                            records[0].getCollection('Successors').load({
                                fetch: [me.TypeField],
                                callback: function(successors) {
                                    var total_count = successors.length + predecessors.length;
                                    var business_count = 0;
                                    Ext.Array.each( Ext.Array.flatten([successors,predecessors]), function(dep){
                                        if ( dep.get(me.TypeField) && dep.get(me.TypeField) == "Business" ) {
                                            business_count = business_count + 1;
                                        }
                                    });
                                    
                                    var platform_count = total_count - business_count;
                                    
                                    item.__PlatformDependencyCount = platform_count;
                                    item.__BusinessDependencyCount = business_count;
                                    
                                    deferred.resolve([]);
                                }
                                
                            });
                        }
                    });

                }
            }
        });
        
        return deferred.promise;
    },
    
    gatherDescendantsForPI: function(record) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        me.gatherStoriesForPI(record).then({
            success: function(stories) {
                record.set('_stories',stories);
                
                var rows = [ record.getData() ];
                Ext.Array.each(stories, function(story){
                    var row = Ext.clone(record.getData());
                    row.Story = story;
                    rows.push(row);
                });
                
                deferred.resolve(rows);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    gatherStoriesForPI: function(record) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        var filters = Rally.data.wsapi.Filter.or([
            {property:'Feature.ObjectID',value:record.get('ObjectID')},
            {property:'Feature.Parent.ObjectID',value:record.get('ObjectID')}
        ]);
        
        var config = {
            model:'HierarchicalRequirement',
            filters: filters,
            limit: Infinity,
            pageSize: 2000,
            fetch: ['ObjectID','FormattedID','Name','Description','c_AcceptanceCriteria',
                'Color','Project','Owner','Iteration','Release','Milestones','Expedite',
                'PlanEstimate','ScheduleState','Ready','TaskEstimateTotal','Defects'
            ]
        };
        
        this._loadWsapiRecords(config).then({
            success: function(stories) {
                var promises = [];
                Ext.Array.each(stories, function(story){
                    promises.push(function() { return me._getTestCasesForStory(story.getData()); });
                });
                
                Deft.Chain.sequence(promises,this).then({
                    success: function(results) {
                        var stories = Ext.Array.flatten(results);
                        
                        if ( stories.length == 0 ) {
                            deferred.resolve(stories);
                            return;
                        }
                        
                        var promises = Ext.Array.map(stories, function(story){
                            return function() {
                                return me._setMilestonesOnStory(story); 
                            }
                        });
                        
                        Deft.Chain.sequence(promises,me).then({
                            success: function(stories_with_milestones) {
                                deferred.resolve(Ext.Array.flatten(stories_with_milestones));
                            },
                            failure: function(msg) {
                                deferred.reject(msg);
                            }
                        });
                        
                        
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _setMilestonesOnStory:function(story_data){
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        story_data._milestones = [];
        
        if ( Ext.isEmpty(story_data.Milestones) || story_data.Milestones.Count === 0 ) {
            return story_data;
        }
        
        var filters = Ext.Array.map(story_data.Milestones._tagsNameArray, function(ms){
            var oid = me._getOidFromRef(ms._ref);
            return { property:'ObjectID', value: oid };
        });
        
        if ( filters.length === 0 ) { return story_data; }
        
        var config = {
            model:'Milestone',
            filters: Rally.data.wsapi.Filter.or(filters),
            limit: Infinity,
            pageSize: 2000,
            fetch: ['ObjectID','Name','TargetDate']
        };
        
        this._loadWsapiRecords(config).then({
            success: function(milestones) {
                var ms_data = Ext.Array.map(milestones, function(milestone){ return milestone.getData(); });
                
                story_data._milestones = ms_data;
                deferred.resolve(story_data);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    _getTestCasesForStory: function(story_data){
        var deferred = Ext.create('Deft.Deferred');
        
        var story_oid = story_data.ObjectID;
        var config = {
            model:'TestCase',
            filters: [{property:'WorkProduct.ObjectID',value:story_oid}],
            limit: Infinity,
            pageSize: 2000,
            fetch: ['ObjectID','FormattedID','Name','Type','LastVerdict']
        };
        
        this._loadWsapiRecords(config).then({
            success: function(testcases) {
                story_data._testcases = testcases;
                story_data._testcasecount_executed = 0;
                story_data._testcasecount_uat = 0;
                story_data._testcasecount_uat_executed = 0;
                Ext.Array.each(testcases, function(testcase){
                    var type = testcase.get('Type');
                    var verdict = testcase.get('LastVerdict');
                    if ( type == 'User Acceptance Testing' ) {
                        story_data._testcasecount_uat = story_data._testcasecount_uat + 1;
                    }
                    
                    if ( !Ext.isEmpty(verdict) ) {
                        story_data._testcasecount_executed = story_data._testcasecount_executed + 1 ;
                    }
                    
                    if (!Ext.isEmpty(verdict) && type == 'User Acceptance Testing' ) {
                        story_data._testcasecount_uat_executed = story_data._testcasecount_uat_executed + 1;
                    }
                });
                
                deferred.resolve(story_data);
                
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
     
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID'],
            compact: false
        };

        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    // given an array of hashes.  TODO: get columns from the app instead of here
    saveCSV: function(rows, file_name) {
        var me = this;
        
        var csv = Ext.Array.map(rows, function(row){
            return me.getCSVFromRow(row,me.getColumns());
        });
        
        csv.unshift(this.getHeadersFromColumns(this.getColumns()));
        
        csv = csv.join('\r\n');
        Rally.technicalservices.FileUtilities.saveCSVToFile(csv,file_name);
    },
    
    getCSVFromRow: function(row, columns) {
        if ( Ext.isEmpty(row) ){
            return;
        }
        
        var nodes = Ext.Array.map(columns, function(column){
            if ( Ext.isEmpty(column.fieldName) ) {
                return '';
            }
            
            
            var value = row[column.fieldName];
            
            if ( !Ext.isEmpty(column.renderer) ) {
                value = column.renderer(value,row);
            }
            
            if ( Ext.isEmpty(value) ) { return ""; }
            if ( Ext.isString(value) ) { return value.replace(/"/g,'""'); }
            
            return value
        });
        
        var csv_string = "";
        Ext.Array.each(nodes, function(node,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node) ) {
                csv_string = csv_string + node;
            } else {
                csv_string = csv_string + '"' + node + '"';
            }

        });
        
        return csv_string;
    },
    
    getHeadersFromColumns: function(columns) {
        var nodes = Ext.Array.map(columns, function(column){
            return column.text;
        });
         
        var csv_string = "";
        Ext.Array.each(nodes, function(node,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node) ) {
                csv_string = csv_string + node;
            } else {
                csv_string = csv_string + '"' + node + '"';
            }

        });
        
        return csv_string;
        
    },
    
    getColumns: function() {
        // NOT for models -- it's for a hash
        var columns = [];
        
        columns = Ext.Array.push(columns,this._getGrandparentColumns());
        columns = Ext.Array.push(columns,this._getParentColumns());
        columns = Ext.Array.push(columns,this._getItemColumns());
        columns = Ext.Array.push(columns,this._getStoryColumns());
        
        return columns;
    },
    
    _getStoryColumns: function() {
        return [
            {fieldName: 'Story', text: 'Story.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: 'Story', text: 'Story.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: 'Story', text: 'Story.ScheduleState', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ScheduleState) ) { return ""; }
                
                return value.ScheduleState;
            }},
            {fieldName: 'Story', text: 'Story.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Description) ) { return ""; }
                
                return value.Description;
            }},
            {fieldName: 'Story', text: 'Story.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: 'Story', text: 'Story.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: 'Story', text: 'Story.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: 'Story', text: 'Story.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: 'Story', text: 'Story.Iteration', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Iteration) ) { return ""; }
                return value.Iteration.Name;
            }},
            {fieldName: 'Story', text: 'Story.Release', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Release) ) { return ""; }
                return value.Release.Name;
            }},
            {fieldName: 'Story', text: 'Story.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: 'Story', text: 'Story.PlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlanEstimate) ) { return "false"; }
                return value.PlanEstimate;
            }},
            {fieldName: 'Story', text: 'Story.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.c_AcceptanceCriteria) ) { return ""; }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: 'Story', text: 'Story.TaskEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.TaskEstimateTotal) ) { return ""; }
                return value.TaskEstimateTotal;
            }},
            {fieldName: 'Story', text: 'Story.ExecutedTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_executed;
            }},
            {fieldName: 'Story', text: 'Story.UATTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_uat;
            }},
            {fieldName: 'Story', text: 'Story.ExecutedUATTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_uat_executed;
            }},
            {fieldName: 'Story', text: 'Story.Defects', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Defects) ) { return ""; }
                return value.Defects.Count;
            }},
            {fieldName: 'Story', text: 'Story.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value._milestones) ) { return ""; }
                
                var display_array = Ext.Array.map(value._milestones, function(ms) {
                    var d = ms.TargetDate;
                    if ( !Ext.isEmpty(d) && ! Ext.isString(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                });
                
                return display_array.join('| ');
            }}
            
                
        ];
    },
    
    _getItemColumns: function() {
        var me = this;
        return [
            {fieldName: 'Item', text: 'Feature.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: 'Item', text: 'Feature.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: 'Item', text: 'Feature.State', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.State) ) { return ""; }
                
                return value.State.Name;
            }},
            {fieldName: 'Item', text: 'Feature.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Description) ) { return ""; }
                
                return value.Description;
            }},
            {fieldName: 'Item', text: 'Feature.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: 'Item', text: 'Feature.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: 'Item', text: 'Feature.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: 'Item', text: 'Feature.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: 'Item', text: 'Feature.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: 'Item', text: 'Feature.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: 'Item', text: 'Feature.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: 'Item', text: 'Feature.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.InvestmentCategory) ) { return ""; }
                return value.InvestmentCategory;
            }},
            {fieldName: 'Item', text: 'Feature.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ValueScore) ) { return ""; }
                return value.ValueScore;
            }},
            {fieldName: 'Item', text: 'Feature.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RiskScore) ) { return ""; }
                return value.RiskScore;
            }},
            {fieldName: 'Item', text: 'Feature.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.WSJFScore) ) { return ""; }
                return value.WSJFScore;
            }},
            {fieldName: 'Item', text: 'Feature.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RefinedEstimate) ) { return ""; }
                return value.RefinedEstimate;
            }},
            {fieldName: 'Item', text: 'Feature.PlannedStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedStartDate) ) { return ""; }
                return value.PlannedStartDate;
            }},
            {fieldName: 'Item', text: 'Feature.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedEndDate) ) { return ""; }
                return value.PlannedEndDate;
            }},
            {fieldName: 'Item', text: 'Feature.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualStartDate) ) { return ""; }
                return value.ActualStartDate;
            }},
            {fieldName: 'Item', text: 'Feature.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualEndDate) ) { return ""; }
                return value.ActualEndDate;
            }},
            {fieldName: 'Item', text: 'Feature.Release.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Release) ) { return ""; }
                return value.Release.Name;
            }},
            {fieldName: 'Item', text: 'Feature.Release.StartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Release) ) { return ""; }
                return value.Release.ReleaseStartDate;
            }},
            {fieldName: 'Item', text: 'Feature.Release.EndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Release) ) { return ""; }
                return value.Release.ReleaseDate;
            }},
            {fieldName: 'Item', text: 'Feature.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: 'Item', text: 'Feature.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.TypeField]) ) { return ""; }
                return value[me.TypeField];
            }},
            {fieldName: 'Item', text: 'Feature.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.PlatformCapabilityField]) ) { return ""; }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: 'Item', text: 'Feature.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.c_AcceptanceCriteria) ) { return ""; }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: 'Item', text: 'Feature.LeafStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.LeafStoryCount) ) { return ""; }
                return value.LeafStoryCount;
            }},
            {fieldName: 'Item', text: 'Feature.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: 'Item', text: 'Feature.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PredecessorsAndSuccessors) ) { return ""; }
                
                return value.PredecessorsAndSuccessors.Count;
            }},
            {fieldName: 'Item', text: 'Feature.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: 'Item', text: 'Feature.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    },
    
    _getParentColumns: function() {
        var me = this;
        return [
            {fieldName: 'Parent', text: 'Feature.Parent.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.State', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.State) ) { return ""; }
                
                return value.State.Name;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Description) ) { return ""; }
                
                return value.Description;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.InvestmentCategory) ) { return ""; }
                return value.InvestmentCategory;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ValueScore) ) { return ""; }
                return value.ValueScore;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RiskScore) ) { return ""; }
                return value.RiskScore;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.WSJFScore) ) { return ""; }
                return value.WSJFScore;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RefinedEstimate) ) { return ""; }
                return value.RefinedEstimate;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PlannedStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedStartDate) ) { return ""; }
                return value.PlannedStartDate;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedEndDate) ) { return ""; }
                return value.PlannedEndDate;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualStartDate) ) { return ""; }
                return value.ActualStartDate;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualEndDate) ) { return ""; }
                return value.ActualEndDate;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.TypeField]) ) { return ""; }
                return value[me.TypeField];
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.PlatformCapabilityField]) ) { return ""; }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.c_AcceptanceCriteria) ) { return ""; }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.LeafStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.LeafStoryCount) ) { return ""; }
                return value.LeafStoryCount;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }

                var business = value.__BusinessDependencyCount || 0;
                var platform = value.__PlatformDependencyCount || 0;
                
                return platform + business;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: 'Parent', text: 'Feature.Parent.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__BusinessDependencyCount) ) { return ""; }
                
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    },
    
    _getGrandparentColumns: function() {
        var me = this;
        return [
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.State', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.State) ) { return ""; }
                
                return value.State.Name;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Description;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.InvestmentCategory) ) { return ""; }
                return value.InvestmentCategory;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ValueScore) ) { return ""; }
                return value.ValueScore;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RiskScore) ) { return ""; }
                return value.RiskScore;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.WSJFScore) ) { return ""; }
                return value.WSJFScore;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RefinedEstimate) ) { return ""; }
                return value.RefinedEstimate;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PlannedStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedStartDate) ) { return ""; }
                return value.PlannedStartDate;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedEndDate) ) { return ""; }
                return value.PlannedEndDate;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualStartDate) ) { return ""; }
                return value.ActualStartDate;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualEndDate) ) { return ""; }
                return value.ActualEndDate;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.TypeField]) ) { return ""; }
                return value[me.TypeField];
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.PlatformCapabilityField]) ) { return ""; }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.LeafStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.LeafStoryCount) ) { return ""; }
                return value.LeafStoryCount;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }

                var business = value.__BusinessDependencyCount || 0;
                var platform = value.__PlatformDependencyCount || 0;
                
                return platform + business;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: 'Grandparent', text: 'Feature.Parent.PortfolioItem.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__BusinessDependencyCount) ) { return ""; }
                
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    }
    
    
});
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows');
        
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            if ( Ext.isFunction(row.getData) ) {
                csv.push( me._getCSVFromRecord(row, grid, store) );
                return;
            }
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define("TSDependencyStatusReport", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    
    layout: 'border',
    
    items: [
        {xtype:'container',itemId:'selector_box', region: 'north', layout: 'hbox'},
        {xtype:'container',itemId:'display_box', region: 'center', layout: 'fit'}
    ],
    
    clearText: '-- all releases --',
    PIs: [],
    MilestonesByOID: {},
    
    pi_fetch: ['ObjectID','FormattedID','Name','Parent','Predecessors','Successors',
                'PercentDoneByStoryCount','PercentDoneByStoryPlanEstimate',
                'PlannedEndDate','PlannedStartDate','Project','Owner','Release','Milestones',
                'TargetDate','LeafStoryCount','State','LeafStoryPlanEstimateTotal',
                'Ready', 'DisplayColor', 'Description','InvestmentCategory',
                'ValueScore','RiskScore','WSJFScore','RefinedEstimate','Expedite',
                'c_PlatformCapability', 'ReleaseStartDate','ReleaseDate',
                'PreliminaryEstimate'],
                
    integrationHeaders : {
        name : "TSDependencyStatusReport"
    },
    
    config: {
        defaultSettings: {
            typeField: null
        }
    },

    launch: function() {
        var me = this;
        
        if (Ext.isEmpty(this.getSetting('typeField')) ) {
            Ext.Msg.alert('Configuration...', 'Please go to Edit App Settings and choose an item field used to define Platform or Business');
            return;
        }
        
        if (Ext.isEmpty(this.getSetting('platformCapabilityField')) ) {
            Ext.Msg.alert('Configuration...','Please go to Edit App Settings and choose an item field used to defined Platform Capability');
        }
        
        this.type_field = this.getSetting('typeField');
        this.platform_capability_field = this.getSetting('platformCapabilityField');

        this.pi_fetch.push(this.type_field);
        this.pi_fetch.push(this.platform_capability_field);
        
        this._addSelectors(this.down('#selector_box'));
        this._addExportButton(this.down('#selector_box'));
    },
      
    _addSelectors: function(container) {
        container.add({ 
            xtype:'portfolioitempickerbutton',
            layout: 'hbox',
            listeners: {
                scope: this,
                itemschosen: function(picker,items) {
                    this.PIs = items;
                    if ( this.PIs.length > 0 ) {
                        this._updateData();
                    }
                    
                    this._changeReleaseBox();
                }
            }
        });
        
        container.add({
            xtype:'container',
            itemId:'release_box'
        });
        
        this._changeReleaseBox();
       
    },
    
    _changeReleaseBox: function() {
        var container = this.down('#release_box');
        if ( Ext.isEmpty(container) ) { return; }
        container.removeAll();
        
        if ( this.PIs.length === 0 ) {
            container.add({ 
                xtype:'rallyreleasecombobox',
                fieldLabel: 'And/Or Step 2: Choose Business Release:',
                margins: '3 0 0 50',
                labelWidth: 215,
                width: 515,
                allowClear: true,
                clearText: this.clearText,
                getDefaultValue: function() {
                    return null;
                },
                listeners: {
                    scope: this,
                    select: this._updateData
                }
            });
            
            return;
        }
        
        this._getChildItems().then({
            scope: this,
            success: function(items) {
                console.trace('_getChildItems()');
                
                var timebox_oids_by_name = {};
                Ext.Array.each(items, function(item) {
                    var release = item.get('Release');
                    if ( !Ext.isEmpty(release) ) {
                        timebox_oids_by_name[release.Name] = release.ObjectID;
                    }
                });
                
                var filters = Ext.Array.map(Ext.Object.getValues(timebox_oids_by_name), function(oid){
                    return { property:'ObjectID',value:oid };
                });
                
                if ( filters.length === 0 ) {
                    container.add({xtype:'container', html:'No Releases on Children for This Item'});
                } else {
                    container.add({ 
                        xtype:'rallyreleasecombobox',
                        fieldLabel: 'And/Or Step 2: Choose Business Release:',
                        margins: '3 0 0 50',
                        labelWidth: 215,
                        width: 515,
                        allowClear: true,
                        clearText: this.clearText,
                        getDefaultValue: function() {
                            return null;
                        },
                        storeConfig: {
                            context: {
                                project: null
                            },
                            filters: Rally.data.wsapi.Filter.or(filters),
                            remoteFilter: true
                        },
                        listeners: {
                            scope: this,
                            select: this._updateData
                        }
                    });
                }
                
            },
            failure: function(msg) {
                Ext.Msg.alert('',msg);
            }
        });
    },
    
    _addExportButton: function(container) {
        container.add({xtype:'container',flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function(button) {
                    this._showExportMenu(button);
                }
            }
        });
    },
    
    _updateData: function() {
        this.down('#export_button').setDisabled(true);
        this.down('#display_box').removeAll();
        
        var release = null;
        this.rows = [];
        this.base_items = [];
        this.baseItemsByOID = {};
        
        if ( !Ext.isEmpty(this.down('rallyreleasecombobox') ) ) {
            release = this.down('rallyreleasecombobox').getRecord();
        }
        
        this.logger.log("_updateData", this.PIs, release);
        
        if ( ( Ext.isEmpty(release) || release.get('Name') == this.clearText ) && ( Ext.isEmpty(this.PIs) || this.PIs.length === 0 ) ) {
            return;
        }
        
        this.rows = [];
        
        Deft.Chain.pipeline([
            this._getChildItems,
            this._getRelatedItems,
            this._getParents
        ],this).then({
            scope: this,
            success: function(results) {
                if ( this.base_items.length === 0 ) { return; }
                
                var rows = this._makeRowsFromHash(this.baseItemsByOID);
                this._fetchMilestoneInformation(rows).then({
                    scope: this,
                    success: function(results) {
                        this.rows = results;
                        this._makeGrid(this.rows);
                    },
                    failure: function(msg) {
                        Ext.Msg.alert('Problem getting milestone data', msg);
                    }
                });
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Fetching Data', msg);
            }
        });
    },
    
    _getParentType: function() {
        if ( Ext.isEmpty(this.PIs) || this.PIs.length == 0 ) {
            return 'portfolioitem/Initiative';
        }
        
        return this.PIs[0].get('_type');
    },
    
    _getChildType: function(type) {
        var type_map = {
            'parent'                  : 'child',
            'portfolioitem/initiative': 'portfolioitem/Feature',
            'portfolioitem/theme'     : 'portfolioitem/Initiative'
        };
        
        return type_map[type] || 'portfolioitem/Feature';
    },
    
    _getChildItems: function() {
        if ( Ext.isEmpty(this.PIs) ) { this.PIs = []; }

        console.trace('_getChildItems');
        this.setLoading('Fetching child items...');
        
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var release = null;
        
        if ( !Ext.isEmpty(this.down('rallyreleasecombobox') ) ) {
            release = this.down('rallyreleasecombobox').getRecord();
        }
        
        var filters = null;

        var release_filter = null;
        if ( release && release.get('Name') != this.clearText ) {
            release_filter = Ext.create('Rally.data.wsapi.Filter',{
                property:'Release.Name',
                value: release.get('Name')
            });
            filters = release_filter;
        }
        
        var pi_filter_configs = Ext.Array.map(this.PIs, function(pi) {
            return [
                {property:'Parent.ObjectID',value:pi.get('ObjectID')}
            ];
        });
        
        var pi_filters = null;
        if ( pi_filter_configs.length > 0 ) {
            pi_filters = Rally.data.wsapi.Filter.or(Ext.Array.flatten(pi_filter_configs));
            filters = pi_filters;
            if ( !Ext.isEmpty(release_filter) ) {
                filters = release_filter.and(pi_filters);
            }
        }
        
        if ( Ext.isEmpty(filters) ) { return []; }

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, value:'Business'}));
        
        var config = {
            model: this._getChildType(this._getParentType()),
            filters: filters,
            context: { project: null },
            fetch: this.pi_fetch
        }
        
        this._loadWsapiRecords(config).then({
            scope: this,
            success: function(items) {
                this.logger.log("Direct child items:", items);
                deferred.resolve(items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    _getRelatedItems: function(base_items) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        console.trace('_getRelatedItems()');
        this.setLoading('Fetching predecessors/successors...');
        this.base_items = base_items;
        
        if ( this.base_items.length === 0 ) {
            Ext.Msg.alert('','No Children Found');
            this.setLoading(false);
            return [];
        }
        var promises = [];
        this.baseItemsByOID = {};
        
        Ext.Array.each(base_items, function(item){
            this.baseItemsByOID[item.get('ObjectID')] = item;
            item.set('_successors',[]);
            item.set('_predecessors',[]);
            
            promises.push(function() { return this._getPredecessors(item); });
            promises.push(function() { return this._getSuccessors(item); });
        },this);
        
        Deft.Chain.sequence(promises,this).then({
            scope: this,
            success: function(results) {
                var related_items = Ext.Array.flatten(results);
                
                this.logger.log('Base Items', this.baseItemsByOID);
                deferred.resolve(related_items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    // getting the parents lets us get the grandparents
    _getParents: function(leaf_items) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
         
        console.trace('_getParents');
        if ( this.base_items.length === 0 ) { return; }
        
        var oids = [];
        Ext.Object.each(this.baseItemsByOID, function(key,item){
            
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            if ( !Ext.isEmpty(parent_oid) ) {
                oids.push(parent_oid);
            }
        });
        
        Ext.Array.each(leaf_items, function(item){
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            if ( !Ext.isEmpty(parent_oid) ) {
                oids.push(parent_oid);
            }
        });
        
        var filters = Ext.Array.map(Ext.Array.unique(oids), function(oid){
            return { property:'ObjectID',value:oid};
        });
        
        var config = {
            model: this._getParentType(),
            filters: Rally.data.wsapi.Filter.or(filters),
            context: { project: null },
            fetch: this.pi_fetch
            
        };
        
        this._loadWsapiRecords(config).then({
            success: function(results) {
                me.parentsByOID = {};
                Ext.Array.each(results, function(result){
                    var oid = result.get('ObjectID');
                    var data = result.getData();
                    me.parentsByOID[oid] = data;
                });
                
                deferred.resolve(leaf_items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
        
    },
    
    _getPredecessors: function(item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        this.logger.log('Finding predecessors for', item.get('FormattedID'), item);
        if ( item.get('Predecessors').Count === 0 ) {
            item.set('_predecessors', []);
            return [];
        }
        
        item.getCollection('Predecessors').load({
            fetch: this.pi_fetch,
            scope: this,
            filters: [Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, operator:'!=', value:'Business'})],
            callback: function(records, operation, success) {
                item.set('_predecessors', records);
                deferred.resolve(records);
            }
        });
        
        return deferred.promise;
    },
    
    _getSuccessors: function(item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        if ( item.get('Successors').Count === 0 ) {
            item.set('_successors', []);
            return [];
        }
        
        item.getCollection('Successors').load({
            fetch: this.pi_fetch, 
            scope: this,
            filters: [Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, operator:'!=', value:'Business'})],
            callback: function(records, operation, success) {
                item.set('_successors', records);
                deferred.resolve(records);
            }
        });
        
        return deferred.promise;
    },
    
    _makeRowsFromHash: function(base_items_by_oid){
        var me = this,
            rows = [];

        Ext.Object.each(base_items_by_oid, function(oid,item){
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            var grandparent = null;
            
            if ( !Ext.isEmpty(parent_oid) && !Ext.isEmpty(me.parentsByOID[parent_oid]) && !Ext.isEmpty(me.parentsByOID[parent_oid].Parent)) {
                grandparent = me.parentsByOID[parent_oid].Parent;
            }
                       
            var business_item = Ext.create('CA.techservices.row.DependencyRow', Ext.Object.merge({
                    _Level: 0,
                    Grandparent: grandparent,
                    //Parent: item.get('Parent'),
                    BusinessItem: item.getData(),
                    Item: item.getData()
                }, item.getData() )
            );
            
            rows.push(business_item);
            
            var dependencies = Ext.Array.push(item.get('_predecessors'), item.get('_successors') );
            Ext.Array.each(dependencies, function(dependency){
                var parent_oid = dependency.get('Parent') && dependency.get('Parent').ObjectID;
                
                grandparent = null;

                if ( !Ext.isEmpty(parent_oid) && !Ext.isEmpty(me.parentsByOID[parent_oid]) && !Ext.isEmpty(me.parentsByOID[parent_oid].Parent)) {
                    grandparent = me.parentsByOID[parent_oid].Parent;
                }
//                
                var related_record = Ext.create('CA.techservices.row.DependencyRow', Ext.Object.merge({
                        _Level: 1,
                        Grandparent: grandparent,
                        //Parent: item.get('Parent'),
                        BusinessItem: item.getData(),
                        Item: item.getData()
                    }, dependency.getData() )
                );
//                
                business_item.addRelatedRecord(related_record);
                rows.push(related_record);
            });            

        });
        return rows;
    },
    
    _fetchMilestoneInformation: function(rows) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        this.setLoading('Fetching Milestone Information...');
        console.trace('_fetchMilestoneInformation()');
        this.logger.log('Finding milestones from rows:', rows);
        
        var milestone_oids = [-1];
        
        if ( rows.length > 0 ) {
            milestone_oids = Ext.Array.unique(
                Ext.Array.flatten(
                    Ext.Array.map(rows, function(row){
                        var row_ms = row.get('Milestones');
                    
                        if ( Ext.isEmpty(row_ms) || row_ms.Count === 0 || row_ms._tagsNameArray.length === 0 ) {
                            return -1;
                        }
                        return Ext.Array.map(row_ms._tagsNameArray, function(tag){
                            return me._getOidFromRef(tag._ref);
                        });
                    })
                )
            );
        }
        
        this.logger.log('Milestone OIDs:', milestone_oids);
        
        var config = {
            model:'Milestone',
            filters: Rally.data.wsapi.Filter.or(
                Ext.Array.map(milestone_oids, function(oid){
                    return { property:'ObjectID',value:oid };
                })
            ),
            limit: Infinity,
            fetch: ['TargetDate','Name','ObjectID']
        };
        
        this._loadWsapiRecords(config).then({
            scope: this,
            success: function(results) {
                me.MilestonesByOID = {};
                Ext.Array.each(results, function(result){
                    me.MilestonesByOID[result.get('ObjectID')] = result;
                });
                
                deferred.resolve(rows);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    _makeGrid: function(rows) {
        var me = this,
            container = this.down('#display_box');
            
        container.removeAll();
        
        this.logger.log('Making grid with rows:', rows);
        
        var store = Ext.create('Rally.data.custom.Store',{ data: rows});
        
        container.add({
            xtype:'rallygrid',
            store: store,
            columnCfgs: this._getColumns(),
            showRowActionsColumn: false,
            viewConfig: {
                listeners: {
                    refresh: function(view){
                        var nodes = view.getNodes();
                        for (var i = 0; i < nodes.length; i++) {
                            
                            var node = nodes[i];
                            
                            // get node record
                            var record = view.getRecord(node);
                            
                            // get color from record data
                            var color = '#fff';
                            if ( record.get("__Type") === "Business" ) {
                                color = "#e7f5fe";
                            }
                            
                            // get all td elements
                            var cells = Ext.get(node).query('td');  
                            
                            // set bacground color to all row td elements
                            for(var j = 0; j < cells.length; j++) {
                                Ext.fly(cells[j]).setStyle('background-color', color);
                                if ( record.get("__Type") === "Business" ) {
                                    Ext.fly(cells[j]).addCls('business');
                                }
                            }                                       
                        }
                    }
                }
            }
        });
        
        this.down('#export_button').setDisabled(false);
    },
    
    _getColumns: function() {
        var columns = [],
            me = this;
            
        var child_name = this._getChildType(this._getParentType()).replace(/.*\//,'');
        
        var theme_level = 'Grandparent';
        
        if ( child_name == "Initiative" ) {
            theme_level = 'Parent';
        }

        columns.push({
            dataIndex: '__' + theme_level + 'FID',
            text:'Theme ID',
            exportRenderer: function(value,meta,record) {
                if ( Ext.isEmpty(value) ) { return ""; }
                return value;
            },
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) {
                    return "";
                }
                return Ext.String.format("<a href='{0}' target='_top'>{1}</a>",
                    Rally.nav.Manager.getDetailUrl(record.get(theme_level)),
                    value
                );
            }
        });
        columns.push({
            dataIndex: '__' + theme_level + 'Name',
            text:'Theme Name',
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return value;
            }
        });

        if ( theme_level == 'Grandparent' ) {
            columns.push({
                dataIndex:'__ParentFID',
                text:'Initiative ID',
                _csvIgnoreRender: true,
                renderer: function(value,meta,record){
                    if ( Ext.isEmpty(value) ) {
                        return "";
                    }
                    return Ext.String.format("<a href='{0}' target='_blank'>{1}</a>",
                        Rally.nav.Manager.getDetailUrl(record.get('Parent')),
                        value
                    );
                }
            });
            
            columns.push({
                dataIndex:'__ParentName',
                text:'Initiative Name',
                renderer: function(value,meta,record){
                    if ( Ext.isEmpty(value) ) { return ""; }
                    return value;
                }
            });
        }
        
        columns.push({
            dataIndex:'__BusinessItemFID',
            text: Ext.String.format('Business {0} ID',child_name),
            _csvIgnoreRender: true,
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) {
                    return "";
                }
                return Ext.String.format("<a href='{0}' target='_blank'>{1}</a>",
                    Rally.nav.Manager.getDetailUrl(record.get('BusinessItem')),
                    value
                );
            }
        });
        
        columns.push({
            dataIndex:'__BusinessItemName',
            text: Ext.String.format('Business {0} Name',child_name),
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return value;
            }
        });
        
        columns.push({
            dataIndex:'FormattedID',
            text: Ext.String.format('{0} ID',child_name),
            _csvIgnoreRender: true,
            renderer: function(value,meta,record){                
                if ( Ext.isEmpty(value) ) {
                    return "";
                }
                return Ext.String.format("<a href='{0}' target='_blank'>{1}</a>",
                    Rally.nav.Manager.getDetailUrl(record),
                    value
                );
            }
        });
        columns.push({
            dataIndex:'Name',
            text:'Name'
        });
        
        columns.push({
            dataIndex:'__Type', 
            text: 'Type',
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) {
                    return "Platform";
                }
                
                return value;
            }
            
        });
        columns.push({
            dataIndex:'State', 
            text: 'State',
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) {
                    return "";
                }
                
                return value._refObjectName;
            }
            
        });
        columns.push({
            dataIndex:'__PercentDoneByStoryCount',
            text: '% Complete by Story Count',
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.create('Rally.ui.renderer.template.progressbar.PortfolioItemPercentDoneTemplate',{
                    percentDoneName: '__PercentDoneByStoryCount'
                }).apply(record.getData());
            },
            exportRenderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.String.format('{0}%', Math.round(100 * value));
            }
        });
        columns.push({
            dataIndex:'__PercentDoneByStoryPlanEstimate',
            text: '% Complete by Story Points',
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.create('Rally.ui.renderer.template.progressbar.PortfolioItemPercentDoneTemplate',{
                    percentDoneName: '__PercentDoneByStoryPlanEstimate'
                }).apply(record.getData());
            },
            exportRenderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.String.format('{0}%', Math.round(100 * value));
            }
        });
        columns.push({dataIndex:'__LeafStoryCount',text:'Leaf Story Count'});
        columns.push({dataIndex:'__LeafStoryPlanEstimateTotal',text:'Leaf Story Plan Estimate Total'});
        
        columns.push({
            dataIndex:'Project',
            text:'Team', 
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return "--"; }
                return value._refObjectName;
            }
        });
        columns.push({
            dataIndex:'Owner',
            text: Ext.String.format('{0} Owner',child_name),
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return "--"; }
                return value._refObjectName;
            }
        });
        columns.push({
            dataIndex:'Release',
            text:'Release', 
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) ) { return "--"; }
                return value._refObjectName;
            }
        });
        
        columns.push({
            dataIndex:'PlannedStartDate',
            text: 'Planned Start Date',
            renderer: function(value,meta,record) {
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.Date.format(value, 'd-M-Y T');
            }
        });
        columns.push({
            dataIndex:'PlannedEndDate',
            text: 'Planned End Date',
            renderer: function(value,meta,record) {
                if ( Ext.isEmpty(value) ) { return ""; }
                return Ext.Date.format(value, 'd-M-Y T');
            }
        });
        columns.push({
            dataIndex:'Milestones',
            text: 'Milestones', 
            renderer: function(value,meta,record){
                if ( Ext.isEmpty(value) || value.Count === 0 ) {
                    return "";
                }
                
                return Ext.Array.map(value._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join(', ');
            }
        });

        return columns;
    },
     
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID'],
            compact: false
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    _showExportMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                {text:'Export', scope: this, handler: this._export},
                {text:'Deep Export', scope: this, handler: this._deepExport}
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    },
    
    _deepExport: function() {
        var me = this;
        this.logger.log('_deepExport');
        
        var rows = this.rows;
        
        // rows are an array of DependencyRow objects
        var exporter = Ext.create('CA.techservices.DeepExporter', {
            records: rows,
            MilestonesByOID: this.MilestonesByOID,
            TypeField: this.type_field,
            PlatformCapabilityField: this.platform_capability_field
        });
        
        this.setLoading('Gathering additional data...');
        
        exporter.gatherDescendantInformation().then({
            success: function(results) {
                var rows = Ext.Array.flatten(results);
                // filter out features that have rows with stories displayed already
                // (because they're duplicate data)
                rows = Ext.Array.filter(rows, function(row){
                    return ( row._stories.length === 0 || !Ext.isEmpty(row.Story) );
                });
                exporter.saveCSV(rows, "E2E Value Stream_MVP Status.csv");
            }
        }).always(function(){ me.setLoading(false)});
        
    },
    
    _export: function(){
        var me = this;
        this.logger.log('_export');
       
        var grid = this.down('rallygrid');
        var rows = this.rows;
                
        this.logger.log('number of rows:', rows.length, rows);
        
        if (!rows ) { return; }
        
        var store = Ext.create('Rally.data.custom.Store',{ data: rows });
        
        if ( !grid ) {
            grid = Ext.create('Rally.ui.grid.Grid',{
                store: store,
                columnCfgs: [{
                    dataIndex: 'FormattedID',
                    text: 'ID'
                },
                {
                    dataIndex: 'Name',
                    text: 'Name'
                },
                {
                    dataIndex: 'Project',
                    text: 'Project',
                    renderer: function(value,meta,record){
                        if ( Ext.isEmpty(value) ) { 
                            return "";
                        }
                        return value._refObjectName
                    }
                },
                {
                    dataIndex: '__ruleText',
                    text:'Rules',
                    renderer: function(value,meta,record){                        
                        return value.join('\r\n');
                    }
                }
                
                ]
            });
        }
        
        var filename = 'E2E Value Stream/MVP Status.csv';

        this.logger.log('saving file:', filename);
        
        this.setLoading("Generating CSV");
        Deft.Chain.sequence([
            function() { return Rally.technicalservices.FileUtilities.getCSVFromRows(this,grid,rows); } 
        ]).then({
            scope: this,
            success: function(csv){
                this.logger.log('got back csv ', csv.length);
                if (csv && csv.length > 0){
                    Rally.technicalservices.FileUtilities.saveCSVToFile(csv,filename);
                } else {
                    Rally.ui.notify.Notifier.showWarning({message: 'No data to export'});
                }
                
            }
        }).always(function() { me.setLoading(false); });
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    getSettingsFields: function() {
        return [{
            name: 'typeField',
            xtype: 'rallyfieldcombobox',
            model: 'PortfolioItem',
            _isNotHidden: function(field) {
                if ( field.hidden ) { return false; }
                var defn = field.attributeDefinition;
                if ( Ext.isEmpty(defn) ) { return false; }
                
                return ( defn.Constrained && defn.AttributeType == 'STRING' );
            }
        },
        {
            name: 'platformCapabilityField',
            xtype: 'rallyfieldcombobox',
            model: 'PortfolioItem',
            _isNotHidden: function(field) {
                if ( field.hidden ) { return false; }
                var defn = field.attributeDefinition;
                if ( Ext.isEmpty(defn) ) { return false; }
                
                return ( defn.Constrained && defn.AttributeType == 'STRING' );
            }        
            //
        }];
    }
});

            
               Rally.launchApp('TSDependencyStatusReport', {
                   name: 'TS Status Report'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-border-layout-ct {
    background-color: #ffffff;
}

.business .x-grid-cell-inner {
    font-weight: bold;
    font-size: 12px !important;
    font-family: Helvetica,Arial !important;
}

.pi-box {
    font: 9px arial, sans-serif !important;
    background-color: #D3D3D3;
    color: black;
    border: 1px solid black;
    padding: 3px;
    margin: 3px;
}

.pi-button {
    font: 16px arial, sans-serif !important;
    background-color: #fff;
    color: black !important;
    border: none;
    margin: 3px;
}


.pi-button.x-btn-default-small .x-btn-inner {
    font: 16px arial, sans-serif !important;
    color: black !important;
}

.pi-delete-button {
    font: 9px arial, sans-serif !important;
    background-color: #fff;
    color: black;
    border: none;
    padding: 3px;
}

.pi-delete-button.x-btn-default-small .x-btn-inner {
    font: 9px arial, sans-serif !important;
    color: black;
}

    </style>

</head>
<body></body>
</html>