<!DOCTYPE html>
<html>
<head>
    <title>Dependency Timeline</title>
    <!--  (c) 2016 CA Technologies.  All Rights Reserved. -->
    <!--  Build Date: Mon Dec 12 2016 19:50:31 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Mon Dec 12 2016 19:50:31 GMT-0800 (PST)";
        var BUILDER = "jmartin";
        var CHECKSUM = 579124909634;
    </script>
    
    <script type="text/javascript" src="/apps/2.1/sdk-debug.js"></script>
    <!-- our highcharts (needed so that we can add patterns) -->
    <script type="text/javascript" src="/apps/2.1/lib/analytics/analytics-all.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
(function () {
    var Ext = window.Ext4 || window.Ext;

    Ext.define("CA.techservices.picker.PortfolioItemPicker", {
        extend: "Ext.container.Container",
        alias: "widget.portfolioitempickerbutton",

        requires: [
            'Deft.Deferred',
            'Rally.util.Test',
            'Rally.ui.EmptyTextFactory',
            'Rally.ui.dialog.ChooserDialog',
            'Rally.data.wsapi.Store'
        ],

        emptyText: '<p>No portfolio items match your search criteria.</p>',

        items: [
            {
                xtype: "container",
                name: "portfolioItemPicker",
                layout: {
                    type: "hbox"
                },
                items: [
                    {

                        xtype: 'rallybutton',
                        text: 'Step 1: Choose Business Initiative / Capability',
                        itemId: 'portfolioItemButton',
                        cls: 'piButton primary small'
                    },
                    {
                        xtype: 'container',
                        items: [
                            {
                                xtype: 'container',
                                itemId: 'portfolioItemDisplay',
                                value: "&nbsp;"
                            }
                        ]
                    }

                ]
            }
        ],

        initComponent: function () {
            this.callParent(arguments);
        },
        
        beforeRender: function () {
            this._configureButton();
            this._configurePicker();
        },

        _configureButton: function () {
            this.down('#portfolioItemButton').on('click', this._onButtonClick, this);
        },

        _configurePicker: function () {
            //this._setValueFromSettings();
            this._loadPortfolioItems();
        },

        _setValueFromSettings: function () {
            var newSettingsValue = this.settingsParent.app.getSetting("portfolioItemPicker"),
                oldSettingsValue = this.settingsParent.app.getSetting("buttonchooser");

            if (this._isSettingValid(newSettingsValue)) {
                this.setValue(newSettingsValue);
            } else if (this._isSettingValid(oldSettingsValue)) {
                this.setValue(Ext.JSON.decode(oldSettingsValue).artifact._ref);
            } else {
                this.setValue("&nbsp;");
            }
        },

        _isSettingValid: function (value) {
            return value && value !== "undefined";
        },

        _loadPortfolioItems: function () {
            if (this._isSavedValueValid()) {
                this._createPortfolioItemStore();
            }
        },

        _createPortfolioItemStore: function () {
            if ( Ext.isEmpty(this.value) || this.value.length === 0 ) {
                return;
            }
            var filters = Rally.data.wsapi.Filter.or(
                Ext.Array.map(this.value,function(pi_ref){
                    return {
                        property: "ObjectID",
                        operator: "=",
                        value: Rally.util.Ref.getOidFromRef(pi_ref)
                    };
                })
            );
            
            Ext.create("Rally.data.wsapi.Store", {
                model: Ext.identityFn("Portfolio Item"),
                filters: filters,
                context: this.requestContext,
                autoLoad: true,
                listeners: {
                    load: this._onPortfolioItemsRetrieved,
                    scope: this
                }
            });
        },

        _isSavedValueValid: function () {
            return Ext.isArray(this.value) && this.value !== "undefined";
        },

        _onPortfolioItemsRetrieved: function (store,records) {
            this._handleStoreResults(records);
        },

        _setDisplayValue: function () {
            var container = this.down('#portfolioItemDisplay');
            container.removeAll();
            container.add(this._getPortfolioItemDisplay());
        },

        _onButtonClick: function () {
            this._destroyChooser();

            this.dialog = Ext.create("CA.techservices.dialog.TypedArtifactChooserDialog", this._getChooserConfig());
            this.dialog.show();
        },

        _destroyChooser: function () {
            if (this.dialog) {
                this.dialog.destroy();
            }
        },

        _getPortfolioItemDisplay: function () {
            if ( Ext.isEmpty(this.portfolioItems) ) {
                this.portfolioItems = [];
                return;
            }
            if ( ! Ext.isArray(this.portfolioItems) ) {
                this.portfolioItems = [this.portfolioItems];
            }
            
            return Ext.Array.map(this.portfolioItems, function(pi){
                //var text = Ext.String.format("{0}: {1} <span class='icon-delete'></span>", pi.FormattedID, pi.Name);
                var text = Ext.String.format("{0}: {1}", pi.FormattedID, pi.Name);
                return {
                    xtype:'button',
                    
//                    cls: 'pi-delete-button',
                    cls: 'pi-button',
                    text: text
//                    listeners: {
//                        scope: this, 
//                        click: function() {
//                            this._removeItem(pi);
//                        }
//                    }
                };
            },this);
        },

        _removeItem: function(record) {
            this.portfolioItems = Ext.Array.filter(this.portfolioItems, function(pi){
                return ( record.FormattedID != pi.FormattedID );
            });
            
            this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) { return pi._ref; });
            this.setValue(this.portfolioItemRefs);

            this._setDisplayValue();
        },
        
        _onPortfolioItemChosen: function (dialog,foundItems) {
            var found_array = foundItems;
            if ( !Ext.isArray(foundItems) ) { found_array = [foundItems]; }
            var existing_items = this.portfolioItems || [];
            
            //var all_items = Ext.Array.merge(found_array, existing_items);
            var all_items = found_array;
            
            this._handleStoreResults(all_items);
            this.fireEvent('itemschosen',this,all_items);
            this._destroyChooser();
        },
        
        _filterUniquePIs: function(items) {
            var hash = {};
            Ext.Array.each(items, function(item) {
                var ref = item._ref || item.get('_ref');
                hash[ref] = item;
            });
            
            return Ext.Object.getValues(hash);
        },

        _handleStoreResults: function(store) {
            if (store) {
                if ( Ext.isArray(store) ) {
                    var pis = Ext.Array.map(store, function(pi) { 
                        if ( !Ext.isEmpty(pi) && Ext.isFunction(pi.getData) ) {
                            return pi.getData();
                        }
                        return pi;
                    });
                    
                    this.portfolioItems = this._filterUniquePIs(pis);
                    
                    this.portfolioItemRefs = Ext.Array.map(this.portfolioItems, function(pi) {
                        return pi._ref;
                    });
                    
                    this._setDisplayValue();
                    this.setValue(this.portfolioItemRefs);
                } else if (store.data) {
                    this.portfolioItem = store.data;
                    this._setDisplayValue();
                    this.setValue(this.portfolioItem._ref);
                }
            }
        },

        _getChooserConfig: function () {
            return {
                artifactTypes: ['portfolioitem/capability','portfolioitem/initiative'],
                multiple: false,
                height: 350,
                title: 'Choose Portfolio Item to Add',
                closeAction: 'destroy',
                selectionButtonText: 'Select',
                _isArtifactEditable: function(record) {
                    return true;
                },
                listeners: {
                    artifactChosen: this._onPortfolioItemChosen,
                    scope: this
                },
                storeConfig: {
                    project: null,
                    context: this.requestContext,
                    fetch: ['ObjectID','Project','WorkSpace','FormattedID','Name','ActualStartDate','PlannedStartDate','ActualEndDate','PlannedEndDate']
                },
                gridConfig: {
                    viewConfig: {
                        emptyText: Rally.ui.EmptyTextFactory.getEmptyTextFor(this.emptyText),
                        getRowClass: function(record) {
                            return Rally.util.Test.toBrowserTestCssClass('row', record.getId()) + '';
                        }
                    }
                }
            };
        },

        setValue: function (value) {
            
            if (value && value !== "undefined") {
                if ( Ext.isString(value) ) {
                    value = value.split(',');
                }
                this.value = value;
            }
            else {
                this.value = this.settingsParent.app.getSetting("portfolioItemPicker");
            }
        },

        getSubmitData: function () {
            var returnObject = {};

            if ( this.portfolioItemRefs && Ext.isArray(this.portfolioItemRefs) ) {
                this.setValue(this.portfolioItemRefs);
                returnObject.portfolioItemPicker = this.portfolioItemRefs;                
            } else if (this.portfolioItem) {

                this.setValue(this.portfolioItem._ref);
                returnObject.portfolioItemPicker = this.portfolioItem._ref;
            }
            else {
                returnObject.portfolioItemPicker = "";
            }

            return returnObject;
        }
    });
}());

Ext.define('CA.techservices.row.DependencyRow',{
    extend: 'Ext.data.Model',
    
    fields: [
        { name: 'ObjectID', type:'integer' },
        { name: 'Grandparent', type:'object' },
        { name: 'Parent', type: 'object' },
        { name: 'FormattedID', type: 'string' },
        { name: 'Name', type:'string' },
        { name: 'State', type:'object' },
        { name: 'Project', type:'object' },
        { name: 'Owner', type:'object' },
        { name: 'Milestones', type:'object' },
        { name: '__Milestones', type:'object', defaultValue: []},

        { name: 'PlannedEndDate', type: 'object' },
        { name: 'PlannedStartDate', type: 'object' },
        { name: 'ReleaseDate', type: 'object' },
        { name: 'ReleaseStartDate', type: 'object' },
        { name: 'ActualStartDate', type: 'object' },
        { name: 'ActualEndDate', type: 'object' },
        { name: 'AcceptedLeafStoryCount', type:'integer' },
        { name: 'AcceptedLeafStoryPlanEstimateTotal', type: 'float' },
        { name: 'LeafStoryCount', type:'integer' },
        { name: 'LeafStoryPlanEstimateTotal', type: 'float' },
        { name: 'UnEstimatedLeafStoryCount', type:'integer' },
        { name: 'PercentDoneByStoryCount', type: 'float', defaultValue: -1 },
        { name: 'PercentDoneByStoryPlanEstimate', type: 'float', defaultValue: -1 },
        { name: '__RelatedRecords', type:'auto'},
        { name: 'Release', type:'object' },
        { name: 'Item', type:'object'},

        { name: 'BusinessItem', type: 'object', convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                return record.get('Item');
            }
        },
        
        { name: '_type', type: 'string' },
        { name: '_ref', type: 'string' },
        { name: 'Workspace', type: 'object' },
        
        { name: '_stories', type:'object'},
        { name: 'PreliminaryState', type: 'object' }, 
                
        { name: '_Level', type: 'integer', defaultValue: 0 },
        
        { name: '__Type', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var level = record.get('_Level');
                
                if ( level === 0 ) { return "Business"; }
                return "Platform";
            }
        },
        
        { name: '__GrandparentFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Grandparent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID;
            }
        },
        
        { name: '__GrandparentName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Grandparent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null
            }
        },
        
        { name: '__ParentFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Parent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__ParentName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Parent');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__ItemFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Item');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__ItemName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('Item');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__BusinessItemFID', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('BusinessItem');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.FormattedID || null;
            }
        },
        
        { name: '__BusinessItemName', type: 'string', defaultValue: null, convert: 
            function(value,record) {
                if ( !Ext.isEmpty(value) ) { return value; }
                
                var item = record.get('BusinessItem');
                
                if ( Ext.isEmpty(item) ) { return null; }
                return item.Name || null;
            }
        },
        
        { name: '__LeafStoryCount', type:'integer', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('LeafStoryCount') || 0;
        }},
        { name: '__LeafStoryPlanEstimateTotal', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('LeafStoryPlanEstimateTotal') || 0;
        } },
        { name: '__PercentDoneByStoryCount', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PercentDoneByStoryCount') || 0;
        } },
        { name: '__PercentDoneByStoryPlanEstimate', type: 'float', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PercentDoneByStoryPlanEstimate') || 0;
        } },
        { name: '__ActualStartDate', type: 'object', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('ActualStartDate') || null;
        } },
        { name: '__ActualEndDate', type: 'object', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('ActualEndDate') || null;
        } },
        { name: '__PlannedStartDate', type: 'object', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PlannedStartDate') || null;
        } },
        { name: '__PlannedEndDate', type: 'object', convert: function(value,record) {
            if ( !Ext.isEmpty(value) ) { return value; }
            return record.get('PlannedEndDate') || null;
        } }
    ],
    
    addRelatedRecord: function( record ) {
        var records = this.get('__RelatedRecords') || [];
        var new_record_oid = record.get('ObjectID');
        var ok_to_add = true;
        Ext.Array.each(records, function(existing_record){
            if ( existing_record.get('ObjectID') == new_record_oid ) {
                ok_to_add = false;
            }
        });
        
        if ( ok_to_add ) {
            records.push(record);
        }

        this.set('__RelatedRecords', records);
        
        this.set('__LeafStoryCount',0);
        
        var my_count = this.get('LeafStoryCount');
        var my_count_ratio = this.get('PercentDoneByStoryCount');
        var my_size = this.get('LeafStoryPlanEstimateTotal');
        var my_size_ratio = this.get('PercentDoneByStoryPlanEstimate');
        
        var counts = Ext.Array.map(records, function(record){ return record.get('LeafStoryCount') || 0 });
        this.set('__LeafStoryCount', Ext.Array.sum(counts) + my_count);
        
        var sizes = Ext.Array.map(records, function(record){ return record.get('LeafStoryPlanEstimateTotal') || 0 });
        this.set('__LeafStoryPlanEstimateTotal', Ext.Array.sum(sizes) + my_size );
        
        var accepted_counts = Ext.Array.map(records, function(record){
            var count = record.get('LeafStoryCount') || 0;
            var ratio = record.get('PercentDoneByStoryCount') || 0;
            
            return count * ratio;
        });
        var my_accepted_count = my_count * my_count_ratio;
        
        var count_ratio = 0;
        if ( this.get('__LeafStoryCount') > 0 ) {
            count_ratio = ( Ext.Array.sum(accepted_counts) + my_accepted_count ) / this.get('__LeafStoryCount');
        }
        
        this.set('__PercentDoneByStoryCount', count_ratio);
        
        var accepted_sizes = Ext.Array.map(records, function(record){
            var count = record.get('LeafStoryPlanEstimateTotal') || 0;
            var ratio = record.get('PercentDoneByStoryPlanEstimate') || 0;
            
            return count * ratio;
        });
        var my_accepted_size = my_size * my_size_ratio;
        
        var size_ratio = 0;
        if ( this.get('__LeafStoryPlanEstimateTotal') > 0 ) {
            size_ratio = ( Ext.Array.sum(accepted_sizes) + my_accepted_size ) / this.get('__LeafStoryPlanEstimateTotal');
        }
        
        this.set('__PercentDoneByStoryPlanEstimate', size_ratio);
        
        this.set('__ActualStartDate',this._getLowerStart(this.get('__ActualStartDate') || new Date(), record.get('__ActualStartDate')));
        this.set('__ActualEndDate',this._getHigherEnd(this.get('__ActualEndDate') || new Date(), record.get('__ActualEndDate')));
        
        this.set('__PlannedStartDate',this._getLowerStart(this.get('__PlannedStartDate'), record.get('__PlannedStartDate')));
        this.set('__PlannedEndDate',this._getHigherEnd(this.get('__PlannedEndDate'), record.get('__PlannedEndDate')));
        
        return true;
    },
    
    _getLowerStart: function(my_start,child_start) {
        if ( Ext.isEmpty(my_start) ) { return child_start; }
        
        if ( !Ext.isEmpty(child_start) && my_start > child_start ) {
            return child_start;
        }
        
        return my_start;
    },
    
    _getHigherEnd: function(my_end, child_end){
        if ( Ext.isEmpty(my_end) ) { return child_end; }
        if ( !Ext.isEmpty(child_end) && my_end < child_end ) {
            return child_end;
        }
        
        return my_end;
    },
    
    
    isSearch: function() { return false; }
});

/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350,
    
    informationalConfig: null,
    
    items: [{xtype:'container', itemId:'information' }],
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/var BUILDER = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
       
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
   
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    var stored_checksum = me._generateChecksum(text);
                    if ( CHECKSUM !== stored_checksum ) {
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    _addToContainer: function(container){
        var config = Ext.apply({
            xtype:'container',
            height: 200,
            overflowY: true
        }, this.informationalConfig);
        
        container.add(config);
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if ( !Ext.isEmpty( this.informationalConfig ) ) {
            var container = this.down('#information');
            this._addToContainer(container);
            
        }
        
        if (! app.isExternal() ) {
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            dock: 'bottom',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml,
                doc: 'top'
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            dock:'bottom',
            html:"This app was created by the CA AC Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                dock: 'bottom',
                html: Ext.String.format("Build date/time: {0} ({1})",
                    APP_BUILD_DATE,
                    BUILDER)
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('CA.techservices.dialog.TypedArtifactChooserDialog', {
    extend: 'Rally.ui.dialog.ArtifactChooserDialog',
    alias: 'widget.tstypedartifactchooserdialog',

    getGridModels: function() {
        return this.chosenTypes || this.artifactTypes;
    },
    
    getSearchBarItems: function() {
        var me = this,
            items = [],
            types = this.artifactTypes;
            
        this.chosenTypes = [ this.artifactTypes[0] ];
        
        if ( !Ext.isEmpty(types) && types.length > 1 ) {
            var store = Ext.create('Rally.data.custom.Store',{
                xtype:'rallycustom',
                autoLoad: true,
                data: Ext.Array.map(types, function(type) {
                    var type_name = type.replace(/.*\//,'');
                    
                    return {_refObjectName:type_name, _ref:type};
                })
            });
            
            items.push({
                xtype:'rallycombobox',
                store: store,
                listeners: {
                    select: function(cb) {
                        me.chosenTypes = [ cb.getValue() ];
                        me.selectionCache = [];
                        me._enableDoneButton();
                        me.buildGrid();
                    }
                }
            });
        }
        
        items.push({
            xtype: 'triggerfield',
            cls: 'rui-triggerfield chooser-search-terms',
            emptyText: 'Search Keyword or ID',
            enableKeyEvents: true,
            flex: 1,
            itemId: 'searchTerms',
            listeners: {
                keyup: function (textField, event) {
                    if (event.getKey() === Ext.EventObject.ENTER) {
                        this._search();
                    }
                },
                afterrender: function (field) {
                    field.focus();
                },
                scope: this
            },
            triggerBaseCls: 'icon-search chooser-search-icon'
        });
        
        return items;
    }
});
/*
 * given a set of records, go get more information for them
 */
 
Ext.define('CA.techservices.DeepExporter',{
    config: {
        /*
         * An array of records
         */
        records: [],
        MilestonesByOID: {},
        TypeField: null,
        PlatformCapabilityField: null,
        CapabilityField: null,
        /*
         * portfolioitem/Feature|portfolioitem/Initiative
         */
        BaseType: 'portfolioitem/Feature',
        fetchFields: ['ObjectID','FormattedID','Name','Parent','Predecessors','Successors',
            'PercentDoneByStoryCount','PercentDoneByStoryPlanEstimate',
            'PlannedEndDate','PlannedStartDate','Project','Owner','Release','Milestones',
            'TargetDate','LeafStoryCount','State','LeafStoryPlanEstimateTotal',
            'Ready', 'DisplayColor', 'Description','InvestmentCategory',
            'ValueScore','RiskScore','WSJFScore','RefinedEstimate','Expedite',
            'c_PlatformCapability', 'ReleaseStartDate','ReleaseDate',
            'PreliminaryEstimate','Feature','PlanEstimate','c_AcceptanceCriteria',
            'TaskEstimateTotal','Tasks','Defects','Milestones'
        ]
    },
    
    constructor: function(config) {
        config = config || {};
        this.mergeConfig(config);
    },
    
    gatherDescendantInformation: function() {
        console.log("base type:", this.BaseType);
        
        var me = this,
            records = this.records;
        // assume that the row represents a portfolio item of some sort
        
        var promises = Ext.Array.map(records, function(record){
            return [
                function() {
                    return me.getDependencyCounts(record,record.get('Item'));
                },
                function() {
                    return me.getDependencyCounts(record,record.get('Parent'));
                },
                function() {
                    return me.getDependencyCounts(record,record.get('Grandparent'));
                },
                function() {
                    return me.gatherDescendantsForPI(record);
                }
            ]
        });
        
        return Deft.Chain.sequence(Ext.Array.flatten(promises),this);
    },
    
    getDependencyCounts: function(record,item) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        if ( Ext.isEmpty(item) || Ext.isEmpty(item.Predecessors) || Ext.isEmpty(item.Predecessors.Count) ) {
            return [];
        }
        if ( Ext.isEmpty(item) || Ext.isEmpty(item.Successors) || Ext.isEmpty(item.Successors.Count) ) {
            return [];
        }
        
        if ( item.Successors.Count === 0 && item.Predecessors.Count === 0 ) {
            return [];
        }
        
        
        var oid = item.ObjectID;
        var model = item._type;
        
        Ext.create('Rally.data.wsapi.Store', {
            model: model,
            fetch: ['Predecessors','Successors'],
            pageSize: 1,
            filters: [{property:'ObjectID',value:oid}],
            context: { project: null },
            autoLoad: true,
            listeners: {
                load: function(store, records) {
                    records[0].getCollection('Predecessors').load({
                        fetch: [me.TypeField],
                        callback: function(predecessors) {
                            records[0].getCollection('Successors').load({
                                fetch: [me.TypeField],
                                callback: function(successors) {
                                    var total_count = successors.length + predecessors.length;
                                    var business_count = 0;
                                    Ext.Array.each( Ext.Array.flatten([successors,predecessors]), function(dep){
                                        if ( dep.get(me.TypeField) && dep.get(me.TypeField) == "Business" ) {
                                            business_count = business_count + 1;
                                        }
                                    });
                                    
                                    var platform_count = total_count - business_count;
                                    
                                    item.__PlatformDependencyCount = platform_count;
                                    item.__BusinessDependencyCount = business_count;
                                    
                                    deferred.resolve([]);
                                }
                                
                            });
                        }
                    });

                }
            }
        });
        
        return deferred.promise;
    },
    
    gatherDescendantsForPI: function(record) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        me.gatherStoriesForPI(record).then({
            success: function(stories) {
                record.set('_stories',stories);
                
                var rows = [ record.getData() ];
                Ext.Array.each(stories, function(story){
                    var row = Ext.clone(record.getData());
                    row.Story = story;
                    rows.push(row);
                });
                
                deferred.resolve(rows);
            },
            failure: function(msg){
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    gatherStoriesForPI: function(record) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        var filters = Rally.data.wsapi.Filter.or([
            {property:'Feature.ObjectID',value:record.get('ObjectID')},
            {property:'Feature.Parent.ObjectID',value:record.get('ObjectID')},
            {property:'Feature.Parent.Parent.ObjectID',value:record.get('ObjectID')}
        ]);
        
        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{
            property:'DirectChildrenCount',
            value: 0
        }));
        
        var config = {
            model:'HierarchicalRequirement',
            filters: filters,
            limit: Infinity,
            pageSize: 2000,
            context: {
                project: null
            },
            fetch: me.fetchFields
        };
        
        this._loadWsapiRecords(config).then({
            success: function(stories) {
                var promises = [];
                Ext.Array.each(stories, function(story){
                    promises.push(function() { return me._getTestCasesForStory(story.getData()); });
                });
                
                Deft.Chain.sequence(promises,this).then({
                    success: function(results) {
                        var stories = Ext.Array.flatten(results);
                        
                        if ( stories.length == 0 ) {
                            deferred.resolve(stories);
                            return;
                        }
                        
                        var promises = Ext.Array.map(stories, function(story){
                            return function() {
                                return me._setMilestonesOnStory(story); 
                            }
                        });
                        
                        Deft.Chain.sequence(promises,me).then({
                            success: function(stories_with_milestones) {
                                deferred.resolve(Ext.Array.flatten(stories_with_milestones));
                            },
                            failure: function(msg) {
                                deferred.reject(msg);
                            }
                        });
                        
                        
                    },
                    failure: function(msg) {
                        deferred.reject(msg);
                    }
                
                });
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
    
    _setMilestonesOnStory:function(story_data){
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        
        story_data._milestones = [];
        
        if ( Ext.isEmpty(story_data.Milestones) || story_data.Milestones.Count === 0 ) {
            return story_data;
        }
        
        var filters = Ext.Array.map(story_data.Milestones._tagsNameArray, function(ms){
            var oid = me._getOidFromRef(ms._ref);
            return { property:'ObjectID', value: oid };
        });
        
        if ( filters.length === 0 ) { return story_data; }
        
        var config = {
            model:'Milestone',
            filters: Rally.data.wsapi.Filter.or(filters),
            limit: Infinity,
            pageSize: 2000,
            fetch: ['ObjectID','Name','TargetDate']
        };
        
        this._loadWsapiRecords(config).then({
            success: function(milestones) {
                var ms_data = Ext.Array.map(milestones, function(milestone){ return milestone.getData(); });
                
                story_data._milestones = ms_data;
                deferred.resolve(story_data);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        return deferred.promise;
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    _getTestCasesForStory: function(story_data){
        var deferred = Ext.create('Deft.Deferred');
        
        var story_oid = story_data.ObjectID;
        var config = {
            model:'TestCase',
            filters: [{property:'WorkProduct.ObjectID',value:story_oid}],
            limit: Infinity,
            pageSize: 2000,
            fetch: ['ObjectID','FormattedID','Name','Type','LastVerdict']
        };
        
        this._loadWsapiRecords(config).then({
            success: function(testcases) {
                story_data._testcases = testcases;
                story_data._testcasecount_executed = 0;
                story_data._testcasecount_uat = 0;
                story_data._testcasecount_uat_executed = 0;
                Ext.Array.each(testcases, function(testcase){
                    var type = testcase.get('Type');
                    var verdict = testcase.get('LastVerdict');
                    if ( type == 'User Acceptance Testing' ) {
                        story_data._testcasecount_uat = story_data._testcasecount_uat + 1;
                    }
                    
                    if ( !Ext.isEmpty(verdict) ) {
                        story_data._testcasecount_executed = story_data._testcasecount_executed + 1 ;
                    }
                    
                    if (!Ext.isEmpty(verdict) && type == 'User Acceptance Testing' ) {
                        story_data._testcasecount_uat_executed = story_data._testcasecount_uat_executed + 1;
                    }
                });
                
                deferred.resolve(story_data);
                
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
    },
     
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID'],
            compact: false
        };

        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
    
    // given an array of hashes.  TODO: get columns from the app instead of here
    saveCSV: function(rows, file_name) {
        var me = this;
        
        var csv = Ext.Array.map(rows, function(row){
            return me.getCSVFromRow(row,me.getColumns());
        });
        
        csv.unshift(this.getHeadersFromColumns(this.getColumns()));
        
        csv = csv.join('\r\n');
        Rally.technicalservices.FileUtilities.saveCSVToFile(csv,file_name);
    },
    
    getCSVFromRow: function(row, columns) {
        if ( Ext.isEmpty(row) ){
            return;
        }
        
        var nodes = Ext.Array.map(columns, function(column){
            if ( Ext.isEmpty(column.fieldName) ) {
                return '';
            }
            
            
            var value = row[column.fieldName];
            
            if ( !Ext.isEmpty(column.renderer) ) {
                value = column.renderer(value,row);
            }
            
            if ( Ext.isEmpty(value) ) { return ""; }
            if ( Ext.isString(value) ) { return value.replace(/"/g,'""'); }
            
            return value
        });
        
        var csv_string = "";
        Ext.Array.each(nodes, function(node,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node) ) {
                csv_string = csv_string + node;
            } else {
                csv_string = csv_string + '"' + node + '"';
            }

        });
        
        return csv_string;
    },
    
    getHeadersFromColumns: function(columns) {
        var nodes = Ext.Array.map(columns, function(column){
            return column.text;
        });
         
        var csv_string = "";
        Ext.Array.each(nodes, function(node,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node) ) {
                csv_string = csv_string + node;
            } else {
                csv_string = csv_string + '"' + node + '"';
            }

        });
        
        return csv_string;
        
    },
    
    getColumns: function() {
        // NOT for models -- it's for a hash
        var columns = [];

        columns = Ext.Array.push(columns,this._getGrandparentColumns());
        columns = Ext.Array.push(columns,this._getParentColumns());
        columns = Ext.Array.push(columns,this._getItemColumns());
        columns = Ext.Array.push(columns,this._getStoryColumns());
        
        return columns;
    },
    
    _getStoryColumns: function() {
        return [
            {fieldName: 'Story', text: 'Story.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: 'Story', text: 'Story.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: 'Story', text: 'Story.ScheduleState', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ScheduleState) ) { return ""; }
                
                return value.ScheduleState;
            }},
            {fieldName: 'Story', text: 'Story.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Description) ) { return ""; }
                
                return value.Description;
            }},
            {fieldName: 'Story', text: 'Story.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: 'Story', text: 'Story.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: 'Story', text: 'Story.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: 'Story', text: 'Story.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: 'Story', text: 'Story.Iteration', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Iteration) ) { return ""; }
                return value.Iteration.Name;
            }},
            {fieldName: 'Story', text: 'Story.Release', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Release) ) { return ""; }
                return value.Release.Name;
            }},
            {fieldName: 'Story', text: 'Story.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: 'Story', text: 'Story.PlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlanEstimate) ) { return ""; }
                return value.PlanEstimate;
            }},
            {fieldName: 'Story', text: 'Story.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.c_AcceptanceCriteria) ) { return ""; }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: 'Story', text: 'Story.TaskEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.TaskEstimateTotal) ) { return ""; }
                return value.TaskEstimateTotal;
            }},
            {fieldName: 'Story', text: 'Story.ExecutedTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_executed;
            }},
            {fieldName: 'Story', text: 'Story.UATTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_uat;
            }},
            {fieldName: 'Story', text: 'Story.ExecutedUATTestCaseCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value._testcasecount_uat_executed;
            }},
            {fieldName: 'Story', text: 'Story.Defects', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Defects) ) { return ""; }
                return value.Defects.Count;
            }},
            {fieldName: 'Story', text: 'Story.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value._milestones) ) { return ""; }
                
                var display_array = Ext.Array.map(value._milestones, function(ms) {
                    var d = ms.TargetDate;
                    if ( !Ext.isEmpty(d) && ! Ext.isString(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                });
                
                return display_array.join('| ');
            }}
            
                
        ];
    },
    
    _getItemColumns: function() {
        var me = this;
        var field = "Item";
        var prefix = null;
        
        if (this.BaseType.toLowerCase() == "portfolioitem/capability") {
            field = "Story";
            prefix = "Feature";
        }
        
        return [
            {fieldName: field, text: 'Feature.FormattedID', renderer: function(value,record){ 
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.FormattedID;
            }},
            {fieldName: field, text: 'Feature.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.Name;
            }},
            {fieldName: field, text: 'Feature.State', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if (Ext.isEmpty(value.State) ) { return ""; }
                return value.State.Name;
            }},
            {fieldName: field, text: 'Feature.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.Description;
            }},
            {fieldName: field, text: 'Feature.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if (Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: field, text: 'Feature.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return "false"; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if (Ext.isEmpty(value.Ready) ) { return "false"; }
                return value.Ready;
            }},
            {fieldName: field, text: 'Feature.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if ( Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: field, text: 'Feature.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if ( Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: field, text: 'Feature.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.DisplayColor;
            }},
            {fieldName: field, text: 'Feature.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if ( Ext.isEmpty(value.Project) ) { return ""; }
                
                return value.Project.Name;
            }},
            {fieldName: field, text: 'Feature.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if ( Ext.isEmpty(value.Owner) ) { return ""; }
                
                return value.Owner._refObjectName;
            }},
            {fieldName: field, text: 'Feature.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.InvestmentCategory;
            }},
            {fieldName: field, text: 'Feature.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.ValueScore;
            }},
            {fieldName: field, text: 'Feature.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.RiskScore;
            }},
            {fieldName: field, text: 'Feature.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.WSJFScore;
            }},
            {fieldName: field, text: 'Feature.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.RefinedEstimate;
            }},
            
            {fieldName: field, text: 'Feature.PlannedStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.PlannedStartDate)) {
                    return "";
                }
                var d = value.PlannedStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.PlannedEndDate)) {
                    return "";
                }
                
                var d = value.PlannedEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.ActualStartDate)) {
                    return "";
                }
                
                var d = value.ActualStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.ActualEndDate)) {
                    return "";
                }
                
                var d = value.ActualEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.Release.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.Release)) {
                    return "";
                }
                
                return value.Release.Name;
            }},
            {fieldName: field, text: 'Feature.Release.StartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.Release)) {
                    return "";
                }
                
                var d = value.Release.ReleaseStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');

            }},
            {fieldName: field, text: 'Feature.Release.EndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.Release)) {
                    return "";
                }
                
                var d = value.Release.ReleaseDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');

            }},
            {fieldName: field, text: 'Feature.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return "false"; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(value.Expedite)) {
                    return "";
                }
                
                return value.Expedite;
            }},
            {fieldName: field, text: 'Feature.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty(Ext.isEmpty(value[me.CapabilityField]) )) {
                    return "";
                }
                
                return value[me.CapabilityField];
            }},
            {fieldName: field, text: 'Feature.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                if(Ext.isEmpty( Ext.isEmpty(value[me.PlatformCapabilityField]))) {
                    return "";
                }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: field, text: 'Feature.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: field, text: 'Feature.LeafStoryCount', renderer: function(value,record){
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.LeafStoryCount;
            }},
            {fieldName: field, text: 'LeafStoryPlanEstimateTotal', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                
                return value.LeafStoryCount;
            }},
            {fieldName: field, text: 'Feature.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                
                if (  Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0 ) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: field, text: 'Feature.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                
                if (  Ext.isEmpty(value.PredecessorsAndSuccessors) || value.PredecessorsAndSuccessors.Count === 0 ) { 
                    return "";
                }
                
                return value.PredecessorsAndSuccessors.Count;
            }},
            {fieldName: field, text: 'Feature.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: field, text: 'Feature.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value)) { return ""; }
                if (prefix) {
                    value = value[prefix];
                    if (Ext.isEmpty(value) ) { return ""; }
                }
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    },
    
    _getParentColumns: function() {
        var me = this;
        var field = "Parent";
        
        if (this.BaseType.toLowerCase() == "portfolioitem/capability") {
            field = "Item";
        }
        
        return [
            {fieldName: field, text: 'Feature.Parent.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: field, text: 'Feature.Parent.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.State', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.State) ) { return ""; }
                
                return value.State.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Description) ) { return ""; }
                
                return value.Description;
            }},
            {fieldName: field, text: 'Feature.Parent.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: field, text: 'Feature.Parent.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: field, text: 'Feature.Parent.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: field, text: 'Feature.Parent.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: field, text: 'Feature.Parent.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: field, text: 'Feature.Parent.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.InvestmentCategory) ) { return ""; }
                return value.InvestmentCategory;
            }},
            {fieldName: field, text: 'Feature.Parent.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ValueScore) ) { return ""; }
                return value.ValueScore;
            }},
            {fieldName: field, text: 'Feature.Parent.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RiskScore) ) { return ""; }
                return value.RiskScore;
            }},
            {fieldName: field, text: 'Feature.Parent.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.WSJFScore) ) { return ""; }
                return value.WSJFScore;
            }},
            {fieldName: field, text: 'Feature.Parent.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RefinedEstimate) ) { return ""; }
                return value.RefinedEstimate;
            }},
            {fieldName: field, text: 'Feature.Parent.PlannedStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedStartDate) ) { return ""; }
                var d = value.PlannedStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
                
            }},
            {fieldName: field, text: 'Feature.Parent.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedEndDate) ) { return ""; }
                var d = value.PlannedEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.Parent.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualStartDate) ) { return ""; }
                var d = value.ActualStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');

            }},
            {fieldName: field, text: 'Feature.Parent.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualEndDate) ) { return ""; }
                var d = value.ActualEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');

            }},
            {fieldName: field, text: 'Feature.Parent.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: field, text: 'Feature.Parent.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.TypeField]) ) { return ""; }
                return value[me.TypeField];
            }},
            {fieldName: field, text: 'Feature.Parent.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.PlatformCapabilityField]) ) { return ""; }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: field, text: 'Feature.Parent.AcceptanceCriteria', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.c_AcceptanceCriteria) ) { return ""; }
                return value.c_AcceptanceCriteria;
            }},
            {fieldName: field, text: 'Feature.Parent.LeafStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.LeafStoryCount) ) { return ""; }
                return value.LeafStoryCount;
            }},
            {fieldName: field, text: 'Feature.Parent.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: field, text: 'Feature.Parent.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }

                var business = value.__BusinessDependencyCount || 0;
                var platform = value.__PlatformDependencyCount || 0;
                
                return platform + business;
            }},
            {fieldName: field, text: 'Feature.Parent.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: field, text: 'Feature.Parent.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__BusinessDependencyCount) ) { return ""; }
                
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    },
    
    _getGrandparentColumns: function() {
        var me = this;
        
        var field = "Grandparent";
        if ( this.BaseType.toLowerCase() == "portfolioitem/capability") {
            field = "Parent";
        }
        
        return [
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.FormattedID', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.FormattedID;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Name', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.State', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.State) ) { return ""; }
                
                return value.State.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PreliminaryEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PreliminaryEstimate) ) { return ""; }
                
                return value.PreliminaryEstimate.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Ready', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Ready) ) { return "false"; }
                
                return value.Ready;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PercentDoneByStoryPlanEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryPlanEstimate) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryPlanEstimate * 100 );
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PercentDoneByStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PercentDoneByStoryCount) ) { return ""; }
                
                return Ext.String.format( "{0}%", value.PercentDoneByStoryCount * 100 );
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Color', renderer: function(value,record){
                if (Ext.isEmpty(value) ) { return ""; }
                
                return value.DisplayColor;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Description', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }
                return value.Description;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Project', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Project) ) { return ""; }
                return value.Project.Name;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Owner', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Owner) ) { return ""; }
                return value.Owner._refObjectName;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.InvestmentCategory', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.InvestmentCategory) ) { return ""; }
                return value.InvestmentCategory;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.ValueScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ValueScore) ) { return ""; }
                return value.ValueScore;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.RiskScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RiskScore) ) { return ""; }
                return value.RiskScore;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.WSJFScore', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.WSJFScore) ) { return ""; }
                return value.WSJFScore;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.RefinedEstimate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.RefinedEstimate) ) { return ""; }
                return value.RefinedEstimate;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PlannedStartDate', renderer: function(value,record){ 
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedStartDate) ) { return ""; }
                var d = value.PlannedStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PlannedEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.PlannedEndDate) ) { return ""; }
                var d = value.PlannedEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.ActualStartDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualStartDate) ) { return ""; }
                var d = value.ActualStartDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
                
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.ActualEndDate', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.ActualEndDate) ) { return ""; }
                var d = value.ActualEndDate;
                if ( Ext.isString(d) ) { d = Rally.util.DateTime.fromIsoString(d); }
                return Ext.Date.format(d, 'd-M-Y T');
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Expedite', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Expedite) ) { return "false"; }
                return value.Expedite;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.CapabilityType', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.TypeField]) ) { return ""; }
                return value[me.TypeField];
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.PlatformCapability', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value[me.PlatformCapabilityField]) ) { return ""; }
                return value[me.PlatformCapabilityField];
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.LeafStoryCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.LeafStoryCount) ) { return ""; }
                return value.LeafStoryCount;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Milestones', renderer: function(value,record){                
                if (Ext.isEmpty(value) || Ext.isEmpty(value.Milestones) || value.Milestones.Count === 0) { return ""; }
                
                return Ext.Array.map(value.Milestones._tagsNameArray, function(ms){
                    var oid = me._getOidFromRef(ms._ref);
                    var d = me.MilestonesByOID[oid] &&  me.MilestonesByOID[oid].get('TargetDate');
                                        
                    if ( !Ext.isEmpty(d) ) {
                        d = '- ' + Ext.Date.format(d, 'd-M-Y T');
                    }
                    return Ext.String.format("{0} {1}",
                        ms.Name,
                        d || ''
                    );
                }).join('| ');
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.DependenciesCount', renderer: function(value,record){                
                if (Ext.isEmpty(value) ) { return ""; }

                var business = value.__BusinessDependencyCount || 0;
                var platform = value.__PlatformDependencyCount || 0;
                
                return platform + business;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Dependencies.Platform', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__PlatformDependencyCount) ) { return ""; }
                
                return value.__PlatformDependencyCount || 0;
            }},
            {fieldName: field, text: 'Feature.Parent.PortfolioItem.Dependencies.Business', renderer: function(value,record){
                if (Ext.isEmpty(value) || Ext.isEmpty(value.__BusinessDependencyCount) ) { return ""; }
                
                return value.__BusinessDependencyCount || 0;
            }}
        ];
    }
    
    
});
Ext.define('recordHolder',{
    data: {},
    constructor: function(config) {
        Ext.apply(this, config);
    },
    
    get: function(field) {
        return this.data[field];
    }
});

Ext.define('Rally.technicalservices.FileUtilities', {
    singleton: true,
    logger: new Rally.technicalservices.Logger(),
    
    saveCSVToFile:function(csv,file_name,type_object){
        if (type_object === undefined){
            type_object = {type:'text/csv;charset=utf-8'};
        }
        this.saveAs(csv,file_name, type_object);
    },
    
    saveAs: function(textToWrite, fileName)
    {
        this.logger.log('saveAs:', fileName);
        
        if (Ext.isIE9m){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for IE9 and below."});
            return;
        }

        var textFileAsBlob = null;
        try {
            textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        }
        catch(e){
            this.logger.log('Caught an error ', e);
            
            window.BlobBuilder = window.BlobBuilder ||
                        window.WebKitBlobBuilder ||
                    window.MozBlobBuilder ||
                    window.MSBlobBuilder;
            if (window.BlobBuilder ) { //&&  e.name === 'TypeError'){
                bb = new BlobBuilder();
                bb.append([textToWrite]);
                textFileAsBlob = bb.getBlob("text/plain");
            }

        }

        if (!textFileAsBlob){
            Rally.ui.notify.Notifier.showWarning({message: "Export is not supported for this browser."});
            return;
        }

        var fileNameToSaveAs = fileName;

        if (Ext.isIE10p){
            window.navigator.msSaveOrOpenBlob(textFileAsBlob,fileNameToSaveAs); // Now the user will have the option of clicking the Save button and the Open button.
            return;
        }

        var url = this.createObjectURL(textFileAsBlob);

        if (url){
            var downloadLink = document.createElement("a");
            if ("download" in downloadLink){
                downloadLink.download = fileNameToSaveAs;
            } else {
                //Open the file in a new tab
                downloadLink.target = "_blank";
            }

            downloadLink.innerHTML = "Download File";
            downloadLink.href = url;
            if (!Ext.isChrome){
                // Firefox requires the link to be added to the DOM
                // before it can be clicked.
                downloadLink.onclick = this.destroyClickedElement;
                downloadLink.style.display = "none";
                document.body.appendChild(downloadLink);
            }
            downloadLink.click();
        } else {
            Rally.ui.notify.Notifier.showError({message: "Export is not supported "});
        }

    },
    createObjectURL: function ( file ) {
        if ( window.webkitURL ) {
            return window.webkitURL.createObjectURL( file );
        } else if ( window.URL && window.URL.createObjectURL ) {
            return window.URL.createObjectURL( file );
        } else {
            return null;
        }
    },
    saveTextAsFile: function(textToWrite, fileName) {
        var textFileAsBlob = new Blob([textToWrite], {type:'text/plain'});
        var fileNameToSaveAs = fileName;

        var downloadLink = document.createElement("a");
        downloadLink.download = fileNameToSaveAs;
        downloadLink.innerHTML = "Download File";
        if (window.webkitURL != null)
        {
            // Chrome allows the link to be clicked
            // without actually adding it to the DOM.
            downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
        }
        else
        {
            // Firefox requires the link to be added to the DOM
            // before it can be clicked.
            downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
            downloadLink.onclick = destroyClickedElement;
            downloadLink.style.display = "none";
            document.body.appendChild(downloadLink);
        }
        downloadLink.click();
    },
    destroyClickedElement: function(event)
    {
        document.body.removeChild(event.target);
    },
    convertDataArrayToCSVText: function(data_array, requestedFieldHash){
       
        var text = '';
        Ext.each(Object.keys(requestedFieldHash), function(key){
            text += requestedFieldHash[key] + ',';
        });
        text = text.replace(/,$/,'\n');
        
        Ext.each(data_array, function(d){
            Ext.each(Object.keys(requestedFieldHash), function(key){
                if (d[key]){
                    if (typeof d[key] === 'object'){
                        if (d[key].FormattedID) {
                            text += Ext.String.format("\"{0}\",",d[key].FormattedID ); 
                        } else if (d[key].Name) {
                            text += Ext.String.format("\"{0}\",",d[key].Name );                    
                        } else if (!isNaN(Date.parse(d[key]))){
                            text += Ext.String.format("\"{0}\",",Rally.util.DateTime.formatWithDefaultDateTime(d[key]));
                        }else {
                            text += Ext.String.format("\"{0}\",",d[key].toString());
                        }
                    } else {
                        text += Ext.String.format("\"{0}\",",d[key] );                    
                    }
                } else {
                    text += ',';
                }
            },this);
            text = text.replace(/,$/,'\n');
        },this);
        return text;
    },
    _getCSVFromWsapiBackedGrid: function(grid,skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.create('Rally.data.wsapi.Store',{
            fetch: grid.getStore().config.fetch,
            filters: grid.getStore().config.filters,
            model: grid.getStore().config.model,
            pageSize: 200
        });
        
        var columns = grid.columns;
        
        var record_count = grid.getStore().getTotalCount(),
            page_size = grid.getStore().pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        Deft.Promise.all(promises).then({
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    getCSVFromRows: function(scope, grid, rows) {
        var me = this;
        var columns = grid.columns;
        var store = grid.getStore();
        
        console.log('getCSVFromRows');
        
        var model = grid.model;

        var csv = [];
        
        csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
        
        Ext.Array.each(rows,function(row){
            if ( Ext.isFunction(row.getData) ) {
                csv.push( me._getCSVFromRecord(row, grid, store) );
                return;
            }
            csv.push( me._getCSVFromRecord(Ext.create('recordHolder', { data:row}), grid, store) );
        });
        
        csv = csv.join('\r\n');
        return csv;
    },
    
    // custom grid assumes there store is fully loaded
    _getCSVFromCustomBackedGrid: function(grid, skip_headers) {
        var deferred = Ext.create('Deft.Deferred');
        var store = Ext.clone( grid.getStore() );
        var columns = grid.columns;
        Rally.getApp().setLoading("Generating CSV...");
        
        var record_count = store.getTotalCount(),
            page_size = store.pageSize,
            pages = Math.ceil(record_count/page_size),
            promises = [];

        for (var page = 1; page <= pages; page ++ ) {
            promises.push(this.loadStorePage(grid, store, columns, page, pages));
        }
        
        Deft.Promise.all(promises).then({
            scope: this,
            success: function(csvs){
                var csv = [];
                if ( !skip_headers ) {
                    csv.push('"' + this._getHeadersFromGrid(grid).join('","') + '"');
                }
                _.each(csvs, function(c){
                    _.each(c, function(line){
                        csv.push(line);
                    });
                });
                csv = csv.join('\r\n');
                deferred.resolve(csv);
                Rally.getApp().setLoading(false);
            }
        });
        return deferred.promise;
    },
    
    _getHeadersFromGrid: function(grid) {
        var headers = [];        
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.hidden ) { return; }
            
            if ( column.dataIndex || column.renderer ) {
                if ( column.csvText ) {
                    headers.push(column.csvText.replace('&nbsp;',' '));
                } else if ( column.text )  {
                    headers.push(column.text.replace('&nbsp;',' '));
                }
            }
        });
        
        return headers;
    },
    
    _getColumnNamesFromGrid: function(grid) {
        var names = [];
        var columns = grid.columns;

        Ext.Array.each(columns,function(column){
            if ( column.dataIndex || column.renderer ) {
                names.push(column.dataIndex);
            }
        });
        
        return names;
    },
    /*
     * will render using your grid renderer.  If you want it to ignore the grid renderer, 
     * have the column set _csvIgnoreRender: true
     */
    getCSVFromGrid:function(app, grid, skip_headers){
        this.logger.log("Exporting grid with store type:", Ext.getClassName(grid.getStore()));
        
        if ( Ext.getClassName(grid.getStore()) != "Rally.data.custom.Store" ) {
            return this._getCSVFromWsapiBackedGrid(grid,skip_headers);
        }
        
        return this._getCSVFromCustomBackedGrid(grid,skip_headers);
    },
    loadStorePage: function(grid, store, columns, page, total_pages){
        var deferred = Ext.create('Deft.Deferred');
        this.logger.log('loadStorePage',page, total_pages);

        store.loadPage(page, {
            callback: function (records) {
                var csv = [];
                Rally.getApp().setLoading(Ext.String.format('Page {0} of {1} loaded',page, total_pages));
                for (var i = 0; i < records.length; i++) {
                    var record = records[i];
                    csv.push( this._getCSVFromRecord(record, grid, store) );
                }
                deferred.resolve(csv);
            },
            scope: this
        });
        return deferred;
    },
    
    _getCSVFromRecord: function(record, grid, store) {
        //console.log('record:', record);
        
        var mock_meta_data = {
            align: "right",
            classes: [],
            cellIndex: 9,
            column: null,
            columnIndex: 9,
            innerCls: undefined,
            recordIndex: 5,
            rowIndex: 5,
            style: "",
            tdAttr: "",
            tdCls: "x-grid-cell x-grid-td x-grid-cell-headerId-gridcolumn-1029 x-grid-cell-last x-unselectable",
            unselectableAttr: "unselectable='on'"
        };
        
        var node_values = [];
        var columns = grid.columns;
        
        Ext.Array.each(columns, function (column) {
            if (column.xtype == 'rallyrowactioncolumn'  || column.xtype == 'tsrowactioncolumn') {
                return;
            }
            
            if ( column.hidden ) {
                return;
            }
            
            if (column.dataIndex) {
                var column_name = column.dataIndex;
                
                var display_value = record.get(column_name);

                if (!column._csvIgnoreRender && ( column.renderer || column.exportRenderer) ) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, 0, 0, store, grid.getView());
                    }
                }
                node_values.push(display_value);
            } else {
                var display_value = null;
                if (!column._csvIgnoreRender && column.renderer) {
                    if (column.exportRenderer) {
                        display_value = column.exportRenderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    } else {
                        display_value = column.renderer(display_value, mock_meta_data, record, record, 0, 0, store, grid.getView());
                    }
                    node_values.push(display_value);
                }
            }
        }, this);
        
        var csv_string = "";
        Ext.Array.each(node_values, function(node_value,idx){
            if ( idx > 0 ) {
                csv_string = csv_string + ",";
            }
            if (/^=/.test(node_value) ) {
                csv_string = csv_string + node_value;
            } else {
                csv_string = csv_string + '"' + node_value + '"';
            }

        });
        
        return csv_string;
    }

});
Ext.define("Rally.techservices.Colors", {
    singleton: true,
    
    // RGB values obtained from here: http://ux-blog.rallydev.com/?cat=23
    grey4: "#C0C0C0",  // $grey4
    orange: "#FF8200",  // $orange
    gold: "#F6A900",  // $gold
    yellow: "#FAD200",  // $yellow
    lime: "#8DC63F",  // $lime
    green_dk: "#1E7C00",  // $green_dk
    blue_link: "#337EC6",  // $blue_link
    blue: "#7FAEDB",  // $blue
    purple : "#7832A5",  // $purple,
    pink : "#DA1884",   // $pink,
    grey7 : "#666",
    black: '#000',

    getCumulativeFlowColors : function() {
        return [
            this.grey4, this.orange, this.gold, this.yellow, this.lime, this.green_dk, this.blue_link, this.blue, this.purple, this.pink
        ];
    },
    
    getTimelineColors: function() {
        return [
            this.grey4, this.blue
        ];
    },

    getBurnLineColor : function (){ return this.blue; },
    
    getTrendLineColor : function (){ return this.black; },
    
    getBurnColumnColor : function() { return this.lime; }
});

(function() {

    'use strict';

    var idCounter = 0,
        wrap = Highcharts.wrap,
        each = Highcharts.each;

    /**
     * Exposed method to add a pattern to the renderer.
     */
    Highcharts.SVGRenderer.prototype.addPattern = function (id, options) {
        var pattern,
            path,
            w = options.width || 10,
            h = options.height || 10,
            ren = this;

        /**
         * Add a rectangle for solid color
         */
        function rect (fill) {
            ren.rect(0, 0, w, h)
                .attr({
                    fill: fill
                })
                .add(pattern);
        }

        if (!id) {
            id = 'highcharts-pattern-' + idCounter;
            idCounter += 1;
        }

        pattern = this.createElement('pattern').attr({
            id: id,
            patternUnits: 'userSpaceOnUse',
            width: options.width || 10,
            height: options.height || 10
        }).add(this.defs);

        // Get id
        pattern.id = pattern.element.id;

        // Use an SVG path for the pattern
        if (options.path) {
            path = options.path;

            // The background
            if (path.fill) {
                rect(path.fill);
            }

            // The pattern
            this.createElement('path').attr({
                'd': path.d || path,
                'stroke': path.stroke || options.color || '#343434',
                'stroke-width': path.strokeWidth || 2
            }).add(pattern);
            pattern.color = options.color;

        // Image pattern
        } else if (options.image) {

            this.image(options.image, 0, 0, options.width, options.height).add(pattern);

        // A solid color
        } else if (options.color) {

            rect(options.color);

        }

        if (options.opacity !== undefined) {
            each(pattern.element.children, function (child) {
                child.setAttribute('opacity', options.opacity);
            });
        }

        return pattern;
    };

    if (Highcharts.VMLElement) {

        Highcharts.VMLRenderer.prototype.addPattern = function (id, options) {

            var patterns;
            if (!id) {
                id = 'highcharts-pattern-' + idCounter;
                idCounter += 1;
            }
            patterns = this.patterns || {};
            patterns[id] = options;
            this.patterns = patterns;
        };

        Highcharts.wrap(Highcharts.VMLRenderer.prototype.Element.prototype, 'fillSetter', function (proceed, color, prop, elem) {
            if (typeof color === 'string' && color.substring(0, 5) === 'url(#') {
                var id = color.substring(5, color.length - 1),
                    pattern = this.renderer.patterns[id],
                    markup;

                if (pattern.image) {
                    // Remove Previous fills                    
                    if (elem.getElementsByTagName('fill').length) {
                        elem.removeChild(elem.getElementsByTagName('fill')[0]);
                    }

                    markup = this.renderer.prepVML(['<', prop, ' type="tile" src="', pattern.image, '" />']);
                    elem.appendChild(document.createElement(markup));

                    // Work around display bug on updating attached nodes
                    if (elem.parentNode.nodeType === 1) {
                        elem.outerHTML = elem.outerHTML;
                    }

                } else if (pattern.color) {
                    proceed.call(this, pattern.color, prop, elem);
                } else {
                    proceed.call(this, '#A0A0A0', prop, elem);
                }
            } else {
                proceed.call(this, color, prop, elem);
            }
        });
    }

    /**
     * Add the predefined patterns
     */
    function addPredefinedPatterns(renderer) {
        var colors = Highcharts.getOptions().colors;

        each([
            'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11',
            'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9',
            'M 3 0 L 3 10 M 8 0 L 8 10',
            'M 0 3 L 10 3 M 0 8 L 10 8',
            'M 0 3 L 5 3 L 5 0 M 5 10 L 5 7 L 10 7',
            'M 3 3 L 8 3 L 8 8 L 3 8 Z',
            'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0',
            'M 10 3 L 5 3 L 5 0 M 5 10 L 5 7 L 0 7',
            'M 2 5 L 5 2 L 8 5 L 5 8 Z',
            'M 0 0 L 5 10 L 10 0'
        ], function (pattern, i) {
            renderer.addPattern('highcharts-default-pattern-' + i, {
                path: pattern,
                color: colors[i]
            });
        });
        
        var patterns = {
            'diagonal-down': {path: 'M 0 0 L 10 10 M 9 -1 L 11 1 M -1 9 L 1 11', color: 'black' },
            'diagonal-up':   {path: 'M 0 10 L 10 0 M -1 1 L 1 -1 M 9 11 L 11 9', color: '#acacac' },
            'vertical':      {path: 'M 3 0 L 3 10 M 8 0 L 8 10', color: 'black' },
            'horizontal':    {path: 'M 0 3 L 10 3 M 0 8 L 10 8', color: 'black' },
            'circles':       {path: 'M 5 5 m -4 0 a 4 4 0 1 1 8 0 a 4 4 0 1 1 -8 0', color: 'white' },
            'squares':       {path: 'M 3 3 L 8 3 L 8 8 L 3 8 Z', color: 'black' },
            'diamonds':      {path: 'M 0 0 L 5 10 L 10 0', color: 'black' }

        };
        
        Ext.Object.each(patterns, function(name,config) { 
            renderer.addPattern(name, config);
        });
    }

    // Add patterns to the defs element
    wrap(Highcharts.Chart.prototype, 'getContainer', function (proceed) {
        proceed.apply(this);

        var chart = this,
            renderer = chart.renderer,
            options = chart.options,
            patterns = options.defs && options.defs.patterns;

        // First add default patterns
        addPredefinedPatterns(renderer);

        // Add user defined patterns
        if (patterns) {
            each(patterns, function (pattern) {
                renderer.addPattern(pattern.id, pattern);
            });
        }

    });

}());
Ext.define('CA.techservices.popover.TimelinePopover',{
    extend: 'Rally.ui.popover.PercentDonePopover',
    
    config: {
        typeField: "Name"
    },

    _setTitle: function() {
        this.setTitle(Ext.String.format("{0} ({1})",
            this.config.percentDoneData.FormattedID,
            Rally.util.HealthColorCalculator.calculateHealthColorForPortfolioItemData(this.config.percentDoneData, this.getPercentDoneName()).label)
        );
    },
    
    
    getAcceptedTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<h3>% DONE</h3>',
            '<div class="percentDoneLine">',
                '{[this.renderPercentDoneByStoryPlanEstimate(values)]}',
                '<div class="percentDoneText">{AcceptedLeafStoryPlanEstimateTotal} of {LeafStoryPlanEstimateTotal} Points Accepted</div>',
            '</div>',
            '<div class="percentDoneLine">',
                '{[this.renderPercentDoneByStoryCount(values)]}',
                '<div class="percentDoneText">{AcceptedLeafStoryCount} of {LeafStoryCount} User Stories Accepted</div>',
            '</div>',
            '<tpl if="UnEstimatedLeafStoryCount &gt; 0">',
                '<div class="dangerNotification percentDoneLine">',
                    'Missing Estimates: ',
                    '<div><b>{UnEstimatedLeafStoryCount} User Stor{[values.UnEstimatedLeafStoryCount == 1? "y" : "ies"]}</b></div>',
                '</div>',
            '</tpl>',
            '<tpl if="!PlannedEndDate && !ActualEndDate">',
                '<div class="dangerNotification percentDoneLine">Item is Missing Planned End Date</div>',
            '</tpl>', {
            renderPercentDoneByStoryPlanEstimate: function(recordData) {
                return Ext.create('Rally.ui.renderer.template.progressbar.PortfolioItemPercentDoneTemplate', {
                    percentDoneName: 'PercentDoneByStoryPlanEstimate',
                    height: '15px',
                    width: '50px',
                    isClickable: false
                }).apply(recordData);
            },
            renderPercentDoneByStoryCount: function(recordData) {
                return Ext.create('Rally.ui.renderer.template.progressbar.PortfolioItemPercentDoneTemplate', {
                    percentDoneName: 'PercentDoneByStoryCount',
                    height: '15px',
                    width: '50px',
                    isClickable: false
                }).apply(recordData);
            }
        });
    },
        
    _buildContent: function(percentDoneData) {
        var html = '';
        percentDoneData.instance = this;
        percentDoneData.canUpdate = this.config.canUpdate;

        html += '<div class="percentDoneContainer">';

        html += this.getAcceptedTpl().apply(percentDoneData);

        if (!Ext.isEmpty(percentDoneData.ActualEndDate)) {
            html += this.getActualEndDateTpl().apply(percentDoneData);
        }

        if(this._shouldShowReleaseSection(percentDoneData)) {
            html += this.getReleaseTpl().apply(percentDoneData);

            if(this._shouldShowLateChildAlert(percentDoneData)) {
                html += this.getLateChildTpl().apply(percentDoneData);
            }
        }

        if (this._shouldShowNotes(percentDoneData)) {
            html += this.getNotesTpl().apply(percentDoneData);
        }
        
        html += this.getItemSummaryTpl().apply(percentDoneData);

        html += '</div>';

        return html;
    },
    
    // TODO:  team, owner, release, type, business feature?

    getItemSummaryTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<hr/>',
            '<table>',
            '<tpl>',
            '{[this.getTypeMessage(values)]}',
            '{[this.getGrandparentMessage(values)]}',
            '{[this.getParentMessage(values)]}',
            '{[this.getStateMessage(values)]}',
            '{[this.getOwnerMessage(values)]}',
            '{[this.getReleaseMessage(values)]}',
            '{[this.getMilestoneMessage(values)]}',
            
            '</tpl>',
            '</table>', {
            getTypeMessage: _.bind(function(values){
                var type = "Platform";
                
                console.log(values);
                if ( values._Level == 2 || values.__Type == "Business" ) {
                    type = "Business";
                }
                return Ext.String.format('<tr><td>Type</td><td>{0}</td></tr>', type);
            },this),    
            getOwnerMessage: _.bind(function(values){
                if (Ext.isEmpty(values.Owner)) {
                    return "";
                }
                return Ext.String.format('<tr><td>Owner</td><td>{0}</td></tr>', values.Owner._refObjectName);
            },this),    
            getReleaseMessage: _.bind(function(values){
                if (Ext.isEmpty(values.Release)) {
                    return "";
                }
                return Ext.String.format('<tr><td>Release</td><td>{0}</td></tr>', values.Release._refObjectName);
            },this),    
            getStateMessage: _.bind(function(values){
                if (Ext.isEmpty(values.State)) {
                    return "";
                }
                return Ext.String.format('<tr><td>State</td><td>{0}</td></tr>', values.State.Name);
            },this),
            getGrandparentMessage: _.bind(function(values){
                if (Ext.isEmpty(values.__GrandparentFID)) {
                    return "";
                }
                return Ext.String.format('<tr><td>Grandparent</td><td>{0}: {1}</td></tr>',values.__GrandparentFID, values.__GrandparentName);
            },this),
            getParentMessage: _.bind(function(values){
                if (Ext.isEmpty(values.__ParentFID)) {
                    return "";
                }
                return Ext.String.format('<tr><td>Parent</td><td>{0}: {1}</td></tr>',values.__ParentFID, values.__ParentName);
            },this),
            getMilestoneMessage: _.bind(function(values){
                var milestones = values.__Milestones;
                if ( Ext.isEmpty(milestones) || milestones.length === 0 ) {
                    return "";
                }
                var html = "<tr><td>Milestones</td><td>";
                Ext.Array.each(milestones, function(milestone){
                    html += Ext.String.format(" {0} ({1})<br/>",
                        milestone.Name,
                        Ext.util.Format.date(milestone.TargetDate,'d-M-Y')
                    );
                });
                html += "</td></tr>";
                return html;
            },this)
        });
    },
    
    getActualEndDateTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<hr/>',
            '<h3>ACTUAL END DATE</h3>',
            '<div class="actualEndDateInfo percentDoneLine">',
                '{[this.formatDate(values.ActualEndDate)]}',
                '<tpl if="PlannedEndDate">',
                    ' ({[this.getEstimateMessage(values)]})',
                '</tpl></div>', {
            getEstimateMessage: _.bind(function(values) {
                var message;

                var actualEnd = values.ActualEndDate;
                var plannedEnd = values.PlannedEndDate;

                var diff = Rally.util.DateTime.getDifference(plannedEnd, actualEnd, 'day');
                if (diff === 0) {
                    message = 'on time';
                } else if (diff > 0) {
                    message = diff + ' day' + (diff === 1 ? '' : 's') + ' early';
                } else {
                    diff = Math.abs(diff);
                    message = diff + ' day' + (diff === 1 ? '' : 's') + ' late';
                }

                return message;
            }, this),
            formatDate: function(js_date) {
                if ( Ext.isEmpty(js_date) || !Ext.isDate(js_date) ) {
                    return "";
                }
                return Ext.util.Format.date(js_date,'d-M-Y');
            }
        });
    },

    getNotesTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<hr/>',
            '<h3>NOTES</h3>',
            '<div class="percentDoneLine">{Notes}</div>');
    },

    getReleaseTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<hr/>',
            '<h3>{Release.Name} ({[this.formatDate(values.Release.ReleaseStartDate)]} - {[this.formatDate(values.Release.ReleaseDate)]})</h3>',
            '<tpl if="this.shouldShowPlannedEndDateAlert(values)">',
                '<tpl if="this.showUpdateText(values)">',
                    '<div class="dangerNotification percentDoneLine">{PortfolioItemTypeName} Planned End Date:',
                        '<div>',
                            '<b>{[this.formatDate(values.PlannedEndDate)]}</b> ',
                            '<tpl if="values.canUpdate">',
                                '<a class="update-link">Update to {[this.formatDate(values.Release.ReleaseDate)]}</a>',
                            '</tpl>',
                        '</div>',
                    '</div>',
                '</tpl>',
                '<tpl if="this.showViewText(values)">',
                    '<div class="dangerNotification percentDoneLine">' +
                        '{PortfolioItemTypeName} Planned Start &amp; End Dates ',
                        '({[this.formatDate(values.PlannedStartDate)]} - {[this.formatDate(values.PlannedEndDate)]}) exist',
                        ' outside of the Release End Date.',
                        '<tpl if="values.canUpdate">',
                            '<a class="detail-link">View</a>',
                        '</tpl>',
                    '</div>',
                '</tpl>',
            '</tpl>',
            {
                formatDate: formatDate,
                showUpdateText: function(percentDoneData) {
                    var start = percentDoneData.PlannedStartDate;
                    return !start || getDate(start) <= getDate(percentDoneData.Release.ReleaseDate);
                },
                showViewText: function(percentDoneData) {
                    return !this.showUpdateText(percentDoneData);
                },
                shouldShowPlannedEndDateAlert: function(percentDoneData) {
                    return percentDoneData.instance._shouldShowReleaseSection(percentDoneData);
                }
            }
        );
    },

    getLateChildTpl: function() {
        return Ext.create('Ext.XTemplate',
            '<tpl if="this.shouldShowLateChildAlert(values)">',
                '<div class="dangerNotification percentDoneLine">' +
                    'Assigned to later releases or iterations:',
                    '<div>',
                        '<b>{LateChildCount} {[this.getUserStoriesText(values.LateChildCount)]}</b> ',
                        '<a class="late-story-view-link">View</a>',
                    '</div>',
                '</div>',
            '</tpl>',
            {
                getUserStoriesText: function(lateChildCount){
                    return lateChildCount > 1 ? 'User Stories' : 'User Story';
                },
                shouldShowLateChildAlert: function(percentDoneData) {
                    return percentDoneData.instance._shouldShowLateChildAlert(percentDoneData);
                }
            });
    }
});
Ext.define('CA.technicalservices.AlternativeTimeline',{
    extend: 'Ext.container.Container',
    alias: 'widget.tsalternativetimeline',
    
    layout: 'border', 
    
    items: [
        {xtype:'container', itemId:'vertical_scroll_box', hidden: true, region: 'west', layout: 'vbox' },
        {xtype:'container', itemId:'display_box',  region:'center'}
    ],
    
    config: {
        records: [],
        
        chartStartDate: Rally.util.DateTime.add(new Date(),'month', -3),
        chartEndDate:   Rally.util.DateTime.add(new Date(),'month', 8),
        
        pageSize: 7,
        
        /* color defaults to showing on Actuals line */
        showColorOnPlanned: false, 
        
        /*
         * Override mapping provided by type in the plannedStartMap and plannedEndMap
         * (If provided, will use these fields for all record types)
         */
        plannedStartField: null,
        plannedEndField  : null,
        /*
         * EventsForPlannedItems: pass in an object with events.  Events can use
         * 'this' to refer to the series point information, and the series is passed
         *     color: colorObject.hex,
         *     low: horizontal index for starting, 
         *     high: horizontal index for end ,
         *     _status: label for the color,
         *     _record: the item for the bar (data, not model)
         *     
         *  use to define individual clicks on the points in the planned series, eg:
         *  {
         *      click: function() { alert(this._record._refObjectName; }
         *  }
         */
        eventsForPlannedItems: null,
        
        actualStartField : 'ActualStartDate',
        actualEndField   : 'ActualEndDate',
        /*
         * EventsForActualItems: pass in an object with events.  Events can use
         * 'this' to refer to the series point information, and the series is passed
         *     color: colorObject.hex,
         *     low: horizontal index for starting, 
         *     high: horizontal index for end ,
         *     _status: label for the color,
         *     _record: the item for the bar (data, not model)
         * 
         */
        eventsForActualItems: null,
        
        allowHorizontalScroll : false, // not yet implemented
        
        /*
         * {boolean} fullPageScroll
         * 
         * True - ignore height passed in and try to make a giant page
         * False - fit into height
         */
        allowVerticalScroll   : true,
       
        /*
         * additionalPlotlines:  push an array of additional plot lines onto the chart
         * 
         * Pass as an array of plotline config objects, but with date instead of value:
         * [{
         *    color: '#0c0',
         *    width: 1,
         *    date: new Date(),
         *    zIndex: 4
         *   }]
         * 
         */
        additionalPlotlines: [],
        /*
         * width of the labels for the vertical axis
         */
        verticalLabelWidth: 200,
        
        /*
         * PercentDoneByStoryCount|PercentDoneByStoryPlanEstimate
         */
        percentDoneField: null
    },

    initComponent: function() {
        this.callParent(arguments);

        this.chartStartDate = this._moveToStartOfMonth(this.chartStartDate);
        this.chartEndDate = this._moveToEndOfMonth(this.chartEndDate);
        
        this._buildChart(this.records);
    },
    
    _moveToStartOfMonth: function(start_date) {
        var day_of_month = start_date.getDate();
        var shift = -1 * ( day_of_month - 1 );         
        return Rally.util.DateTime.add(start_date, 'day', shift);
    },
    
    _moveToEndOfMonth: function(end_date) {
        var start_of_month = Rally.util.DateTime.add(this._moveToStartOfMonth(end_date), 'month', 1);
        
        return Rally.util.DateTime.add(start_of_month, 'day', -1);
    },
    
    _buildChart: function(records) {
        this._processItems(records);
        
        if ( this.records.length - 1 < this.pageSize ) {
            this.pageSize = this.records.length - 1;
        }
        
        if ( !this.allowVerticalScroll ) {
            var min_height = 200;
            this.pageSize = this.records.length - 1;
            this.height = this.pageSize * 50;
            if ( this.height < min_height ) {
                this.height = min_height;
            }
            this.setHeight(this.height);
        }
        
        this._addScrollBars();
        
        var display_box  = this.down('#display_box');        
        this.highchart = display_box.add(this._getTimelineConfig());
    },
    
    _addScrollBars: function() {
        
        var vertical_scroll_box = this.down('#vertical_scroll_box');
        
        vertical_scroll_box.add(this._getUpButtonConfig());
        vertical_scroll_box.add({ xtype:'container', flex: 1 });
        vertical_scroll_box.add(this._getDownButtonConfig());
        if ( this.allowVerticalScroll) {
            vertical_scroll_box.show();
        }
        if ( this.allowHorizontalScroll ) {
            var horizontal_scroll_box = this.add({
                xtype:'container', 
                itemId:'horizontal_scroll_box', 
                region: 'south', 
                layout: 'hbox'
            });
            
            horizontal_scroll_box.add(this._getLeftButtonConfig());
            horizontal_scroll_box.add({ xtype:'container', flex: 1 });
            horizontal_scroll_box.add(this._getRightButtonConfig());
        }
    },
    
    _getTimelineConfig: function() {
        var config = {
            xtype: 'rallychart',
            region:'center',
           
            loadMask: false,
            chartData: this._getChartData(),
            chartColors: Rally.techservices.Colors.getTimelineColors(),
            chartConfig: this._getChartConfig()
        };
        
        if ( this.height ) { config.height = this.height - 10; }
        
        //console.log(this.height, config.height);
        
        return config;
    },
    
    // override to make labels differently
    getCategoryString: function(record) {
        var type = record.get('_type');
        if ( type == 'iteration' || type == 'release' ) {
            return record.get('Name');
        }
        
        return Ext.String.format( '{0}: {1}',
            record.get('FormattedID'),
            record.get('Name')
        );
    },
    
    // override to put on top of category list (vertical x axis)
    getCategoryHeader: function() {
        return null;
    },
    
    _processItems: function(records) {
        this.dateCategories = this._getDateCategories();
        
        this.categories = Ext.Array.map(records, function(record) { 
            return this.getCategoryString(record);
        },this);
        
                
        var planned_series = { 
            name: 'Planned',
            pointWidth: 12,
            data: this._getPlannedRangesFromItems(records,this.dateCategories)
        };
        
        
        var actual_series = {
            name: 'Actual',
            data: this._getActualRangesFromItems(records, this.dateCategories)
        };
        
        this.series = [
            actual_series,
            planned_series
        ];
    },
    
    _getNumberOfDays: function() {
        return Rally.util.DateTime.getDifference(this.chartEndDate, this.chartStartDate, 'day');
    },
    
    _getDateCategories: function() {
        var start_date = this.chartStartDate;
        var end_date = this.chartEndDate;
        
        var diff = this._getNumberOfDays();
        
        var categories = Ext.Array.map( _.range(0,diff), function(index) {
            var date = Rally.util.DateTime.add(start_date, 'day', index);
            return this._getCategoryFromDate(date);
        },this);
        
        return categories;
    },
   
    _getCategoryFromDate: function(date) {
        return Ext.Date.format(date, 'Y-m-d');
    },
    
    _getPositionOnTimeline: function(categories, date) {
        var category_date = this._getCategoryFromDate(date);
        
        var index = Ext.Array.indexOf(categories,category_date);
        
        if ( index > -1 ) { return index; }
        
        if (category_date > categories[categories.length-1] ) { return categories.length-1; }
        
        return 0;
    },
    
    plannedStartFieldMap: {
        iteration: "StartDate",
        release: "ReleaseStartDate",
        "default": "PlannedStartDate"
    },
    
    plannedEndFieldMap: {
        "iteration": "EndDate",
        "release": "ReleaseDate",
        "default": "PlannedEndDate"
    },
    
    _getPlannedEndField: function(type) {
        if ( !Ext.isEmpty(this.plannedEndField) ) { return this.plannedEndField; }
        if ( !Ext.isEmpty(this.plannedEndFieldMap[type]) ) { return this.plannedEndFieldMap[type]; }
        if ( !Ext.isEmpty(this.plannedEndFieldMap['default']) ) { return this.plannedEndFieldMap['default']; }
        
        return 'PlannedEndDate';
    },
    
    _getPlannedStartField: function(type) {
        if ( !Ext.isEmpty(this.plannedStartField) ) { return this.plannedStartField; }
        if ( !Ext.isEmpty(this.plannedStartFieldMap[type]) ) { return this.plannedStartFieldMap[type]; }
        if ( !Ext.isEmpty(this.plannedStartFieldMap['default']) ) { return this.plannedStartFieldMap['default']; }
        
        return 'PlannedStartDate';
    },
    
    _getPlannedRangesFromItems: function(items, categories) {
        return Ext.Array.map(items, function(item) {
            var plannedStartField = this._getPlannedStartField(item.get('_type'));
            var plannedEndField   = this._getPlannedEndField(item.get('_type'));
                        
            var start_index = this._getPositionOnTimeline(categories, item.get(plannedStartField) );
            var end_index   = this._getPositionOnTimeline(categories, item.get(plannedEndField) );
            
            var colorObject = null;
                        
            if ( this.showColorOnPlanned ) {
                var colorObject = Rally.util.HealthColorCalculator.calculateHealthColorForPortfolioItemData(item.data, 'PercentDoneByStoryCount');
    
                if ( Ext.isEmpty(item.get('PercentDoneByStoryCount') ) || item.get('PercentDoneByStoryCount') < 0 ){
                    colorObject = {
                        hex: '#000',
                        label: 'Has no Percent Done by Story Count'
                    }
                }
            }
             
            
            var config = {
                color: 'url(#diagonal-up)',
                low: start_index, 
                high: end_index ,
                _record: item.getData()
            };
            
            if ( !Ext.isEmpty(colorObject) ) {
                config.color = colorObject.hex,
                config._status = colorObject.label
            }
            
            if ( this.eventsForPlannedItems ) {
                config.events = this.eventsForPlannedItems;
            }
            return config;
        },this);
    },
    
    _getActualRangesFromItems: function(items, categories) {
        var actualStartField = this.actualStartField;
        var actualEndField = this.actualEndField;
        
        return Ext.Array.map(items, function(item) {
            var start_index = this._getPositionOnTimeline(categories,item.get(actualStartField));
            var end_index   = this._getPositionOnTimeline(categories,item.get(actualEndField));
            
            
            if ( Ext.isEmpty(item.get(actualStartField) ) ) {
                start_index = null;
            }
            
            if ( Ext.isEmpty(item.get(actualEndField)) ) {
                end_index = this._getPositionOnTimeline(categories,new Date());
            }
            
            var colorObject = {
                hex: '#acacac'
            };
            
            if ( !this.showColorOnPlanned ) {
                var colorObject = Rally.util.HealthColorCalculator.calculateHealthColorForPortfolioItemData(item.data, 'PercentDoneByStoryCount');
    
                if ( Ext.isEmpty(item.get('PercentDoneByStoryCount') ) || item.get('PercentDoneByStoryCount') < 0 ){
                    colorObject = {
                        hex: '#000',
                        label: 'Has no Percent Done by Story Count'
                    }
                }
            }
             
            var config = {
                color: colorObject.hex,
                low: start_index, 
                high: end_index ,
                _status: colorObject.label,
                _record: item.getData()
            };
            
            if ( this.eventsForActualItems ) {
                config.events = this.eventsForActualItems;
            }
            return config;
            
        },this);
    },
    
    /**
     * Generate x axis categories and y axis series data for the chart
     * (This chart is sideways, so categories represent the vertical axis)
     */
    _getChartData: function() {
        
        return {
            categories: this.categories,
            //min: min,
            series: this.series
        };
    },
    
    _getExtremes: function(chart, id) {
        var axis = chart.get(id); // must set the axis' id property
        return axis.getExtremes();
    },

    _getPlotBands: function() {
        var me = this;
        
        var bands = [];
        var range = this._getNumberOfDays();
        
        var header = null;
        var month_start = null;
        
        Ext.Array.each( _.range(0,range), function(index) {
            var from_date = Rally.util.DateTime.add(me.chartStartDate, 'day', index);
            var month_name = Ext.String.format(
                "<table><tr><th class='ts-month-title'>{0}<br/>{1}</th></tr></table>",
                Ext.Date.format(from_date, 'M'),
                Ext.Date.format(from_date, 'Y')
            );
            if ( month_name != header ) { 
                header = month_name;
                var from = index;
                var to_date = Rally.util.DateTime.add(from_date, 'month', 1);
                var diff = Rally.util.DateTime.getDifference(to_date, from_date, 'day');
                
                var to = from + diff - 1;
                
                bands.push({
                    color: '#f6f6f6',
                    from: from,
                    to: to,
                    label: {
                        text: header,
                        align: 'center',
                        useHTML: true,
                        y: -15
                    },
                    zIndex: 3
                });
            }
        });
       
//        var bands = Ext.Array.map( _.range(0,12), function(index) {
//            var band_start_date = Rally.util.DateTime.add(start_date, 'month', index);
//            var band_end_date = Rally.util.DateTime.add(band_start_date, 'month', 1);
//            
//            var value = Ext.Date.format(band_start_date,'M');
//            
//            var to = Ext.Array.indexOf(me.dateCategories,me._getCategoryFromDate(band_end_date)) - 1;
//            if ( to < 0 ) { to = 364; }
//            
//            return {
//                color: '#eee',
//                from: Ext.Array.indexOf(me.dateCategories,me._getCategoryFromDate(band_start_date)) +1,
//                to: to,
//                label: {
//                    text: value,
//                    align: 'center',
//                    y: -2
//                },
//                zIndex: 3
//            }
//        },this);
        
        return bands;
    },
    
    _getPlotLines: function() {
        var me = this;
                
        var today_line = {
            color: '#c00',
            width: 1,
            value: Ext.Array.indexOf(me.dateCategories,me._getCategoryFromDate(new Date())),
            zIndex: 4
        };
        
        var plotlines = [today_line];
        
        if (this.additionalPlotlines) {
            Ext.Array.each(this.additionalPlotlines, function(config){
                if ( config.date ) {
                    config.value = Ext.Array.indexOf(me.dateCategories,me._getCategoryFromDate(config.date));
                }
                plotlines.push(config);
            });
        }
        return plotlines;
    },
    
    /**
     * Generate a valid Highcharts configuration object to specify the column chart
     */
    _getChartConfig: function() {
        var me = this;
        
        var max = this.pageSize;
        var vertical_axis_width = this.verticalLabelWidth;
        
        var chart_config = {
            chart: {
                inverted: true,
                marginLeft: vertical_axis_width,
                marginTop: 35,
                type: 'columnrange',
                zoomType: 'y',
                events: {
                    load: function(evt) {
                        me._setChart(this);
                    }
                }
            },
            title: {
                text: ''
            },
            subtitle: {
                text: ''
            },
            xAxis: {
                min: 0,
                id: 'xAxis',
                max: max,
                labels: {
                    align: 'left',
                    x: -1 * vertical_axis_width,
                    useHTML: true
                }
            },
            yAxis: {
                id: 'yAxis',
                //tickInterval: 366,
                categories: this.categories,
                min: 0,
                max: this._getNumberOfDays(),
                title: {
                    text: ' '
                },
                plotBands: this._getPlotBands(),
                plotLines: this._getPlotLines(),
                labels: {
                    align: 'right',
                    formatter: function() {
                        return "";
                    }
                }
            },

            tooltip: {
                headerFormat: '<span style="font-size:10px">{point.key}</span><table>',
                    pointFormat: '<tr><td style="color:{series.color};padding:0">{series.name}: </td>' +
                    '<td style="padding:0"><b>{point.y:.1f} mm</b></td></tr>',
                    footerFormat: '</table>',
                    shared: true,
                    useHTML: true,
                    enabled: false
            },
            
            legend: { enabled: false },
            
            plotOptions: {

                columnrange: {
                    dataLabels: {
                        enabled: true,
                        formatter: function() { 
                            // only show on left;
                            var field = 'PercentDoneByStoryPlanEstimate';
                            if ( me.percentDoneField ) {
                                field = me.percentDoneField;
                            }
                            
                            var display_text = "";
                            
                            if ( this.point.low == this.y && this.point.high != this.point.low ) {
                                var start_field = me.plannedStartField;
                                if ( this.series.name == "Actual" ) {
                                    start_field = me.actualStartField;
                                }
                                
                                if ( !Ext.isEmpty(this.point._record[start_field]) ) {
                                    display_text += Ext.util.Format.date(this.point._record[start_field], 'd-M');
                                }
                            }
                            
                            if ( this.point.high == this.y && this.point.high != this.point.low ) {
                                var start_field = me.plannedEndField;
                                if ( this.series.name == "Actual" ) {
                                    start_field = me.actualEndField;
                                }
                                
                                if ( !Ext.isEmpty(this.point._record[start_field]) ) {
                                    display_text += Ext.util.Format.date(this.point._record[start_field], 'd-M');
                                }
                            }
                            
                            if ( this.series.name == "Actual" && this.point.low == this.y 
                                && !Ext.isEmpty(this.point._record[field]) && this.point.high != this.point.low ) {
                                    display_text += Ext.String.format(" ({0}%)",
                                        parseInt(this.point._record[field] * 100)
                                    );
                            }
                            return display_text;
                        }
                    }
                },
                
                series: {
                    pointPadding: 0
                }
            }
        };
        
        return chart_config;
    },
    
    _setChart: function(chart) {
        this.highchart = chart;
        this._addCategoryHeader(chart);
        
        this._enableChartButtons();
    },
    
    _addCategoryHeader: function(chart) {
        var string = this.getCategoryHeader();
        if ( !Ext.isEmpty(string) ) {
            var x = 0;
            var y = 0;
            var shape = 'rect';
            var anchorX = null;
            var anchorY = null;
            var useHTML = true;
            
            var label = chart.renderer.label(string,x,y,shape,anchorX,anchorY,useHTML).add();
            
            label.align({
                align: 'left',
                x: 0,
                y: 0
            });
        }
    },
    
    _enableChartButtons: function() {
        var up_button = this.down('#up_button');
        var down_button = this.down('#down_button');
        
        up_button.setDisabled(true);
        down_button.setDisabled(true);
        
        if ( this.allowHorizontalScroll ) {
            
        }
        
        if ( this.highchart ) {
            var vertical_extremes = this._getExtremes(this.highchart,'xAxis');
            
            if ( vertical_extremes.min > 0 ) {
                up_button.setDisabled(false);
            }
            
            if ( vertical_extremes.max < vertical_extremes.dataMax ) {
                down_button.setDisabled(false);
            }
            
        }
    },
    
    _getLeftButtonConfig: function() {
        return { 
            xtype:'rallybutton', 
            itemId: 'left_button', 
            text: '<span class="icon-left"> </span>', 
            disabled: false, 
            cls: 'secondary small',
            margin: '5 0 3 200',
            listeners: {
                scope: this,
                click: function() {
                    if ( this.highchart ) {
                        this._scrollUp(this.highchart);
                    }
                }
            }
        };
    },
    
    _getRightButtonConfig: function() {
        return { 
            xtype:'rallybutton', 
            itemId: 'right_button', 
            text: '<span class="icon-right"> </span>', 
            disabled: false, 
            cls: 'secondary small',
            margin: '5 10 3 0',
            listeners: {
                scope: this,
                click: function() {
                    if ( this.highchart ) {
                        this._scrollRight(this.highchart);
                    }
                }
            }
        };
    },
    
    _getUpButtonConfig: function() {
        return { 
            xtype:'rallybutton', 
            itemId: 'up_button', 
            text: '<span class="icon-up"> </span>', 
            disabled: true, 
            cls: 'secondary small',
            listeners: {
                scope: this,
                click: function() {
                    if ( this.highchart ) {
                        this._scrollUp(this.highchart);
                    }
                }
            }
        };
    },
    
    _getDownButtonConfig: function() {
        return { 
            xtype:'rallybutton', 
            itemId: 'down_button', 
            text: '<span class="icon-down"> </span>', 
            disabled: true, 
            cls: 'secondary small',
            margin: '0 0 25 0',
            listeners: {
                scope: this,
                click: function() {
                    if ( this.highchart ) {
                        this._scrollDown(this.highchart);
                    }
                }
            }
        };
    },
    
    _setExtremes: function(chart, id, min, max) {
        var axis = chart.get(id); // must set the axis' id property
        var extremes = this._getExtremes(chart,id);
        
        axis.setExtremes(min,max);
        this._enableChartButtons();
    },
        
    _scrollRight: function(chart) {
//        var extremes = this._getExtremes(chart,'xAxis');
//        var new_max = extremes.max - 1;
//        var new_min = extremes.min - 1;
//        
//        if ( new_min < 0 ) { new_min = 0; }
//        if ( new_max < new_min + this.pageSize - 1) { 
//            new_max = new_min + this.pageSize - 1;
//        }
//        
//        this._setExtremes(chart,'xAxis',new_min,new_max);
    },
    
    _scrollUp: function(chart) {
        var extremes = this._getExtremes(chart,'xAxis');
        var new_max = extremes.max - 1;
        var new_min = extremes.min - 1;
        
        if ( new_min < 0 ) { new_min = 0; }
        if ( new_max < new_min + this.pageSize - 1) { 
            new_max = new_min + this.pageSize - 1;
        }
        
        this._setExtremes(chart,'xAxis',new_min,new_max);
    },
    
    _scrollDown: function(chart) {
        var extremes = this._getExtremes(chart,'xAxis');
        var new_max = extremes.max + 1;
        var new_min = extremes.min + 1;
        
        //if ( new_max > extremes.dataMax ) { new_max = extremes.dataMax; }
        if ( new_min > new_max - this.pageSize + 1 ) { 
            new_min =  new_max - this.pageSize + 1;
            if ( new_min < 0 ) { new_min = 0; }
        }
        
        this._setExtremes(chart,'xAxis',new_min,new_max);
    }
    
    
});

Ext.define('CA.techservices.ToggleButton', {
    extend: Ext.Container ,
    alias:'widget.tstogglebutton',

    componentCls: 'rui-gridboard-toggle toggle-button-group',
    layout: 'hbox',
    border: 1,
    activeButtonCls: 'rly-active hide-tooltip',

    toggleState: 'size',

    defaultType: 'rallybutton',
    items: [
        {
            itemId: 'size',
            cls: 'toggle rly-left',
            frame: false,
            text: 'S',
            toolTipConfig: {
                html: 'Switch to Size View',
                anchor: 'top',
                hideDelay: 0,
                constrainPosition: false,
                anchorOffset: 45,
                mouseOffset: [-45, 0]
            }
        },
        {
            itemId: 'count',
            cls: 'toggle rly-right',
            frame: false,
            text: 'C',
            toolTipConfig: {
                html: 'Switch to Count View',
                anchor: 'top',
                hideDelay: 0,
                constrainPosition: false,
                anchorOffset: 65,
                mouseOffset: [-65, 0]
            }
        }
    ],

    initComponent: function() {
        this.callParent(arguments);

        this.addEvents([
            /**
             * @event toggle
             * Fires when the toggle value is changed.
             * @param {String} toggleState 'Hours' or 'Days'.
             */
            'toggle'
        ]);

        this.items.each(function(item) {
            this.mon(item, 'click', this._onButtonClick, this);
        }, this);

        this.down('#' + this.toggleState).addCls(this.activeButtonCls);
    },

    _onButtonClick: function(btn) {
        var btnId = btn.getItemId();
        if (btnId !== this.toggleState) {
            this.toggleState = btnId;

            this.items.each(function(item) {
                if (item === btn) {
                    if (!item.hasCls(this.activeButtonCls.split(' ')[0])) {
                        item.addCls(this.activeButtonCls);
                    }
                } else {
                    item.removeCls(this.activeButtonCls);
                }
            }, this);

            this.fireEvent('toggle', this, this.toggleState);
        }
    },
    
    getValue: function() {
        return this.toggleState;
    }
});
Ext.define("TSDependencyTimeline", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    items: [
        {xtype:'container',itemId:'selector_box', region: 'north', layout: 'hbox'},
        {xtype:'container',itemId:'display_box', region: 'center', layout: 'fit'}
    ],

    integrationHeaders : {
        name : "TSDependencyTimeline"
    },
    
    
    clearText: '-- all releases --',
    PIs: [],
    MilestonesByOID: {},
    parentsByOID: {},
    
    pi_fetch: ['ObjectID','FormattedID','Name','Parent','Predecessors','Successors',
        'PercentDoneByStoryCount','PercentDoneByStoryPlanEstimate',
        'PlannedEndDate','PlannedStartDate','Project','Owner','Release','Milestones',
        'TargetDate','LeafStoryCount','State','LeafStoryPlanEstimateTotal',
        'Ready', 'DisplayColor', 'Description','InvestmentCategory',
        'ValueScore','RiskScore','WSJFScore','RefinedEstimate','Expedite',
        'c_PlatformCapability', 'ReleaseStartDate','ReleaseDate',
        'PreliminaryEstimate','Feature'],

    config: {
        defaultSettings: {
            typeField: null
        }
    },
    
    launch: function() {
        var me = this;
        if (Ext.isEmpty(this.getSetting('typeField')) ) {
            Ext.Msg.alert('Configuration...', 'Please go to Edit App Settings and choose a feature field used to define Platform or Business');
            return;
        }
        this.type_field = this.getSetting('typeField');
        this.platform_capability_field = this.getSetting('platformCapabilityField');
        this.capability_field = this.getSetting('capabilityTypeField');
        
        this.pi_fetch.push(this.type_field);
        this.pi_fetch.push(this.platform_capability_field);
        this.pi_fetch.push(this.capability_field);
        
        this._addSelectors(this.down('#selector_box'));
        this._addExportButton(this.down('#selector_box'));
    },
      
    _addSelectors: function(container) {
        
        container.add({ 
            xtype:'portfolioitempickerbutton',
            layout: 'hbox',
            listeners: {
                scope: this,
                itemschosen: function(picker,items) {
                    this.PIs = items;
                    this._changeReleaseBox();

                    if ( this.PIs.length > 0 ) {
                        this._updateData();
                    }
                    
                }
            }
        });
        
        container.add({
            xtype:'container',
            itemId:'release_box'
        });
        
        this._changeReleaseBox();
        
        var store = Ext.create('Rally.data.custom.Store',{
            xtype:'rallycustom',
            autoLoad: true,
            data: [
                { _refObjectName:'Size', _ref: 'size' },
                { _refObjectName:'Count',_ref: 'count'}
            ]
        });
        
        this.metric_selector = container.add({
            xtype:'rallycombobox',
            store: store,
            itemId: 'metric_selector',
            margin: '0 10 0 10',
            width: 100,
            stateful: true,
            stateId: 'techservices-timeline-metriccombo-1',
            stateEvents:['select','change'],
            listeners: {
                scope: this,
                change: this._updateData
            }
        });
        
       
    },
    
    _addExportButton: function(container) {
        container.add({xtype:'container',flex: 1});
        
        container.add({
            xtype:'rallybutton',
            itemId:'export_button',
            cls: 'secondary',
            text: '<span class="icon-export"> </span>',
            disabled: true,
            listeners: {
                scope: this,
                click: function(button) {
                    this._showExportMenu(button);
                }
            }
        });
    },
    
    _changeReleaseBox: function() {
        var container = this.down('#release_box');
        if ( Ext.isEmpty(container) ) { return; }
        container.removeAll();
        
        if ( this.PIs.length === 0 ) {
            container.add({ 
                xtype:'rallyreleasecombobox',
                fieldLabel: 'And/Or Step 2: Choose Business Release:',
                margins: '3 0 0 50',
                labelWidth: 215,
                width: 515,
                allowClear: true,
                clearText: this.clearText,
                getDefaultValue: function() {
                    return null;
                },
                listeners: {
                    scope: this,
                    change: this._updateData
                }
            });
            
            return;
        }
        
        
        this._getChildItems().then({
            scope: this,
            success: function(items) {
                var timebox_oids_by_name = {};
                Ext.Array.each(items, function(item) {
                    var release = item.get('Release');
                    if ( !Ext.isEmpty(release) ) {
                        timebox_oids_by_name[release.Name] = release.ObjectID;
                    }
                });
                
                var filters = Ext.Array.map(Ext.Object.getValues(timebox_oids_by_name), function(oid){
                    return { property:'ObjectID',value:oid };
                });
                
                if ( filters.length === 0 ) {
                    container.add({xtype:'container', html:'No Releases on Features for This Item'});
                } else {
                    container.add({ 
                        xtype:'rallyreleasecombobox',
                        fieldLabel: 'And/Or Step 2: Choose Business Release:',
                        margins: '3 0 0 50',
                        labelWidth: 215,
                        width: 515,
                        allowClear: true,
                        clearText: this.clearText,
                        getDefaultValue: function() {
                            return null;
                        },
                        storeConfig: {
                            context: {
                                project: null
                            },
                            filters: Rally.data.wsapi.Filter.or(filters),
                            remoteFilter: true
                        },
                        listeners: {
                            scope: this,
                            change: this._updateData
                        }
                    });
                }
                
            },
            failure: function(msg) {
                
                Ext.Msg.alert('',msg);
            }
        });
    },
    
    _updateData: function() {
        this.down('#display_box').removeAll();
        this.down('#export_button').setDisabled(true);

        var release = null;
        this.rows = [];
        this.base_items = [];
        this.baseItemsByOID = {};
        this.metric = this.metric_selector.getValue();

        if ( !Ext.isEmpty(this.down('rallyreleasecombobox') ) ) {
            release = this.down('rallyreleasecombobox').getRecord();
        }
                
        if ( ( Ext.isEmpty(release) || release.get('Name') == this.clearText ) && ( Ext.isEmpty(this.PIs) || this.PIs.length === 0 ) ) {
            return;
        }
        
        this.rows = [];
        
        Deft.Chain.pipeline([
            this._getChildItems,
            this._getRelatedItems,
            this._getParents
        ],this).then({
            scope: this,
            success: function(results) {
                if ( this.base_items.length === 0 ) { return; }
                
                var rows = this._makeRowsFromHash(this.baseItemsByOID);
                this._fetchMilestoneInformation(rows).then({
                    scope: this,
                    success: function(results) {
                        this.rows = results;
                        this._makeChart(this.rows);
                    },
                    failure: function(msg) {
                        Ext.Msg.alert('Problem getting milestone data', msg);
                    }
                });
            },
            failure: function(msg) {
                Ext.Msg.alert('Problem Fetching Data', msg);
            }
        });
        
    },
    
    _getParentType: function() {
        if ( Ext.isEmpty(this.PIs) || this.PIs.length == 0 ) {
            return null;
        }
        
        return this.PIs[0].get('_type');
    },
    
    _getChildType: function(type) {
        var type_map = {
            'parent'                  : 'child',
            'portfolioitem/capability': 'portfolioitem/Feature',
            'portfolioitem/initiative': 'portfolioitem/Capability'
        };
        
        return type_map[type] || 'hierarchicalrequirement';
    },
    
    _getChildItems: function() {
        if ( Ext.isEmpty(this.PIs) ) { this.PIs = []; }

        this.setLoading('Fetching child items...');
        
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        
        var release = null;
        
        if ( !Ext.isEmpty(this.down('rallyreleasecombobox') ) ) {
            release = this.down('rallyreleasecombobox').getRecord();
        }
        
        if ( this.PIs.length === 0 && Ext.isEmpty(release) ) {
            return [];
        }
        var filters = null;

        var release_filter = null;
        if ( release && release.get('Name') != this.clearText ) {
            release_filter = Ext.create('Rally.data.wsapi.Filter',{
                property:'Release.Name',
                value: release.get('Name')
            });
            filters = release_filter;
        }
        
        var pi_filter_configs = Ext.Array.map(this.PIs, function(pi) {
            return [
                {property:'Parent.ObjectID',value:pi.get('ObjectID')}
            ];
        });
        
        var pi_filters = null;
        if ( pi_filter_configs.length > 0 ) {
            pi_filters = Rally.data.wsapi.Filter.or(Ext.Array.flatten(pi_filter_configs));
            filters = pi_filters;
            if ( !Ext.isEmpty(release_filter) ) {
                filters = release_filter.and(pi_filters);
            }
        }
        
        if ( Ext.isEmpty(filters) ) { return []; }

        filters = filters.and(Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, value:'Business'}));
        
        var config = {
            model: this._getChildType(this._getParentType()),
            filters: filters,
            context: { project: null },
            fetch: this.pi_fetch
        }
        
        this._loadWsapiRecords(config).then({
            scope: this,
            success: function(items) {
                deferred.resolve(items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    _getRelatedItems: function(base_items) {
        var me = this,
            deferred = Ext.create('Deft.Deferred');
        this.setLoading('Fetching predecessors/successors...');
        this.base_items = base_items;
        
        if ( this.base_items.length === 0 ) {
            Ext.Msg.alert('','No Children Found');
            this.setLoading(false);
            return [];
        }
        var promises = [];
        this.baseItemsByOID = {};
        
        Ext.Array.each(base_items, function(item){
            this.baseItemsByOID[item.get('ObjectID')] = item;
            item.set('_successors',[]);
            item.set('_predecessors',[]);
            
            promises.push(function() { return this._getPredecessors(item); });
            promises.push(function() { return this._getSuccessors(item); });
        },this);
        
        Deft.Chain.sequence(promises,this).then({
            scope: this,
            success: function(results) {
                var related_items = Ext.Array.flatten(results);
                
                deferred.resolve(related_items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    // getting the parents lets us get the grandparents
    _getParents: function(leaf_items) {
        this.logger.log('_getParents',leaf_items.length);
        var me = this,
            deferred = Ext.create('Deft.Deferred');
                    
        if ( this.base_items.length === 0 ) { return []; }
        if ( leaf_items.length === 0 ) { return []; }
        
        var oids = [];
        Ext.Object.each(this.baseItemsByOID, function(key,item){
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            if ( !Ext.isEmpty(parent_oid) ) {
                oids.push(parent_oid);
            }
        });
        
        Ext.Array.each(leaf_items, function(item){
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            if ( !Ext.isEmpty(parent_oid) ) {
                oids.push(parent_oid);
            }
        });
        
        var filters = Ext.Array.map(Ext.Array.unique(oids), function(oid){
            return { property:'ObjectID',value:oid};
        });
        
        var config = {
            model: this._getParentType(),
            filters: Rally.data.wsapi.Filter.or(filters),
            context: { project: null },
            fetch: this.pi_fetch

        };
        
        this._loadWsapiRecords(config).then({
            success: function(results) {
                Ext.Array.each(results, function(result){
                    var oid = result.get('ObjectID');
                    var data = result.getData();
                    me.parentsByOID[oid] = data;
                });
                
                deferred.resolve(leaf_items);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        });
        
        return deferred.promise;
        
    },
    
    _getPredecessors: function(item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        if ( item.get('Predecessors').Count === 0 ) {
            item.set('_predecessors', []);
            return [];
        }
        
        item.getCollection('Predecessors').load({
            fetch: this.pi_fetch,
            scope: this,
            filters: [Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, operator:'!=', value:'Business'})],
            callback: function(records, operation, success) {
                item.set('_predecessors', records);
                deferred.resolve(records);
            }
        });
        
        return deferred.promise;
    },
    
    _getSuccessors: function(item) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
            
        if ( item.get('Successors').Count === 0 ) {
            item.set('_successors', []);
            return [];
        }
        
        item.getCollection('Successors').load({
            fetch: this.pi_fetch, 
            scope: this,
            filters: [Ext.create('Rally.data.wsapi.Filter',{property:this.type_field, operator:'!=', value:'Business'})],
            callback: function(records, operation, success) {
                item.set('_successors', records);
                deferred.resolve(records);
            }
        });
        
        return deferred.promise;
    },
    
    _makeRowsFromHash: function(base_items_by_oid){
        var me = this,
            rows = [];
            
        if ( !Ext.isEmpty(this.down('rallyreleasecombobox') ) ) {
            var release = this.down('rallyreleasecombobox').getRecord();
            if ( release && release.get('Name') != this.clearText ) {
                rows.push(Ext.create('CA.techservices.row.DependencyRow', Ext.Object.merge({
                        _Level: 0
                    }, release.getData() )
                ));
            }
        }

        Ext.Object.each(base_items_by_oid, function(oid,item){
            var parent_oid = item.get('Parent') && item.get('Parent').ObjectID;
            var grandparent = null;
            
            if ( !Ext.isEmpty(parent_oid) && !Ext.isEmpty(me.parentsByOID[parent_oid]) && !Ext.isEmpty(me.parentsByOID[parent_oid].Parent)) {
                grandparent = me.parentsByOID[parent_oid].Parent;
            }
                       
            var business_item = Ext.create('CA.techservices.row.DependencyRow', Ext.Object.merge({
                    _Level: 2,
                    Grandparent: grandparent,
                    //Parent: item.get('Parent'),
                    BusinessItem: item.getData(),
                    Item: item.getData()
                }, item.getData() )
            );
            
            rows.push(business_item);
            
            var dependencies = Ext.Array.push(item.get('_predecessors'), item.get('_successors') );
            Ext.Array.each(dependencies, function(dependency){
                var parent_oid = dependency.get('Parent') && dependency.get('Parent').ObjectID;
                
                grandparent = null;

                if ( !Ext.isEmpty(parent_oid) && !Ext.isEmpty(me.parentsByOID[parent_oid]) && !Ext.isEmpty(me.parentsByOID[parent_oid].Parent)) {
                    grandparent = me.parentsByOID[parent_oid].Parent;
                }
//                
                var related_record = Ext.create('CA.techservices.row.DependencyRow', Ext.Object.merge({
                        _Level: 3,
                        Grandparent: grandparent,
                        BusinessItem: item.getData(),
                        Item: item.getData()
                    }, dependency.getData() )
                );
//                
                if ( business_item.addRelatedRecord(related_record)  ) {
                    rows.push(related_record);
                }
            });            

         // add an extra line with just the business item in it
            if (dependencies.length > 0) {
                var row = Ext.create('CA.techservices.row.DependencyRow',
                    Ext.Object.merge({
                        _Level: 3,
                        Grandparent: grandparent,
                        BusinessItem: item.getData(),
                        Item: item.getData(),
                        __Type: 'Business'
                    }, 
                    item.getData()) 
                );
                
//                row.set('Name',"Not Applicable");
//                row.set('FormattedID', 'Not Applicable');
//                row.set('__Type', 'Not Applicable');
                rows.push(row);
            }
            
        });
        
        return rows;
    },
    
    _fetchMilestoneInformation: function(rows) {
        var deferred = Ext.create('Deft.Deferred'),
            me = this;
        this.setLoading('Fetching Milestone Information...');
        
        var milestone_oids = [-1];
        
        if ( rows.length > 0 ) {
            milestone_oids = Ext.Array.unique(
                Ext.Array.flatten(
                    Ext.Array.map(rows, function(row){
                        var row_ms = row.get('Milestones');
                    
                        if ( Ext.isEmpty(row_ms) || row_ms.Count === 0 || row_ms._tagsNameArray.length === 0 ) {
                            return -1;
                        }
                        return Ext.Array.map(row_ms._tagsNameArray, function(tag){
                            return me._getOidFromRef(tag._ref);
                        });
                    })
                )
            );
        }
                
        var config = {
            model:'Milestone',
            filters: Rally.data.wsapi.Filter.or(
                Ext.Array.map(milestone_oids, function(oid){
                    return { property:'ObjectID',value:oid };
                })
            ),
            limit: Infinity,
            fetch: ['TargetDate','Name','ObjectID']
        };
        
        this._loadWsapiRecords(config).then({
            scope: this,
            success: function(results) {
                me.MilestonesByOID = {};
                Ext.Array.each(results, function(result){
                    me.MilestonesByOID[result.get('ObjectID')] = result;
                });
                
                me.milestoneLines = [];
                
                Ext.Array.each(results, function(milestone){
                    
                    me.milestoneLines.push({
                        color: '#0c0',
                        width: 3,
                        date: milestone.get('TargetDate'),
                        dashStyle: 'shortdash',
                        zIndex: 4
                    
                    });
                });
                
                Ext.Array.each(rows, function(row) {
                    var item_milestones = [];
                    
                    Ext.Array.each( row.get('Milestones')._tagsNameArray || [], function(ms){
                        var ref = ms._ref;
                        var ms_oid = me._getOidFromRef(ref);
                        if ( me.MilestonesByOID[ms_oid]  ) {
                            item_milestones.push(me.MilestonesByOID[ms_oid].getData());
                        }
                    });
                    row.set('__Milestones',item_milestones);
                });
                deferred.resolve(rows);
            },
            failure: function(msg) {
                deferred.reject(msg);
            }
        }).always(function() { me.setLoading(false); });
        
        return deferred.promise;
    },
    
    _loadWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');
        var me = this;
        var default_config = {
            model: 'Defect',
            fetch: ['ObjectID']
        };
        this.logger.log("Starting load:",config.model);
        Ext.create('Rally.data.wsapi.Store', Ext.Object.merge(default_config,config)).load({
            callback : function(records, operation, successful) {
                if (successful){
                    deferred.resolve(records);
                } else {
                    me.logger.log("Failed: ", operation);
                    deferred.reject('Problem loading: ' + operation.error.errors.join('. '));
                }
            }
        });
        return deferred.promise;
    },
        
    _makeChart: function(rows) {
        this.down('#display_box').removeAll();

        this.down('#display_box').add(this._getChartConfig(rows));
        this.down('#export_button').setDisabled(false);

    },
    
    getCategoryHeader: function(){
        var html = "<div style='white-space: normal;'>";
        html += "<table style='width: 510px; table-layout: fixed;'>";
        
        html += "<tr>";
        
        Ext.Array.each(Rally.getApp()._getCategoryColumns(), function(column){
            var style = column.style;
            var string = column.text;
            
            html += Ext.String.format("<th class='ts-timeline-category-cell' style='{0}'>{1}</th>",
                style,
                string
            );
        });
        
        html += "</div></tr></table>";

        return html;
    },
    
    getCategoryString: function(record) {
        var html = "<div style='white-space: normal;'>";
        html += "<table style='width: 510px; table-layout: fixed;'>";
        
        html += "<tr>";
        
        Ext.Array.each(Rally.getApp()._getCategoryColumns(), function(column){
            var style = column.style;
            var value = record.get(column.dataIndex);
            var string = column.renderer(value,null,record);
            
            html += Ext.String.format("<td class='ts-timeline-category-cell' style='{0}'>{1}</td>",
                style,
                string
            );
        });
        html += "</div></tr></table>";

        return html;
    },
    
    _getCategoryColumns: function() {
        var columns = [
            {
                dataIndex: 'ObjectID',
                text: 'Portfolio Item',
                style: "width:250px",
                renderer: function(value,meta,record) {
                    var record_type = record.get('_type');
                    
                    var string = record.get('Name');
                    
                    if ( record_type !== 'release' ) {
                        string = Ext.String.format( '<a href="{0}" target="blank">{1}</a>: {2}',
                            Rally.nav.Manager.getDetailUrl(record),
                            record.get('FormattedID'),
                            record.get('Name')
                        );
                    }
                    
                    var level = record.get('_Level') || 0;
                    
                    var indent = level * 8;
                    
                    var style = "padding-left: " + indent + "px;";
                    
                    if ( level == 2 ) {
                        style += "font-weight:bold;";
                        string = "<span style='font-weight:bold;'>" + string + "</span>";
                    } 
                                        
                    return Ext.String.format("<div style='{0}'>{1}</div>",
                        style,
                        string
                    );
                }
            },
            {
                dataIndex: 'Project',
                text: 'Project',
                style: "width:250px",
                renderer: function(value,meta,record) {
                    if ( Ext.isEmpty(value) ) { return ""; }
                    var string = value._refObjectName;

                    var level = record.get('_Level') || 0;
                   
                    if ( level == 2 ) {
                        string = "<span style='font-weight:bold;'>" + string + "</span>";
                    } 
                    
                    return string;
                }
            }
        ];
        
        return columns;
    },
    
    _getChartConfig: function(rows) {
        var me = this;
        
        var config = {
            xtype: 'tsalternativetimeline',
            //height: 500,
            allowVerticalScroll: false,
            width: this.getWidth() - 20,
            verticalLabelWidth: 513,
            records: rows,
            pageSize: 7,
            getCategoryString: me.getCategoryString,
            getCategoryHeader: me.getCategoryHeader,
            additionalPlotlines: [], //this.milestoneLines,
            actualStartField: '__ActualStartDate',
            actualEndField: '__ActualEndDate',
            plannedEndField: '__PlannedEndDate',
            plannedStartField: '__PlannedStartDate',
            
            percentDoneField: this.metric == 'count' ? '__PercentDoneByStoryCount':'__PercentDoneByStoryPlanEstimate',

            eventsForPlannedItems: {
                
                click: function(evt) {
                    
                    if ( this._record._type != 'release' && this._record._type != 'iteration' ) {
                        

                        var pop = Ext.create('CA.techservices.popover.TimelinePopover', {
                            target: Ext.get(evt.target),//Ext.get(evt.target.graphic.element),
                            delegate: '.mySelectorForAllTargets'
                        });
                                        
                        pop.updateContent(this._record);
                    }
                }
            },
            eventsForActualItems: {
                click: function(evt) {
                    //Rally.nav.Manager.showDetail(this._record._ref);
                    if ( this._record._type != 'release' && this._record._type != 'iteration' ) {
                        

                        var pop = Ext.create('CA.techservices.popover.TimelinePopover', {
                            target: Ext.get(evt.target),//Ext.get(evt.target.graphic.element),
                            delegate: '.mySelectorForAllTargets'
                        });
                                        
                        pop.updateContent(this._record);
                    }
                }
            }
        };
        
        var start_date = this._getStartDate();
        if ( !Ext.isEmpty(start_date) ) { config.chartStartDate = start_date; }
        
        var end_date = this._getEndDate();
        if ( !Ext.isEmpty(end_date) ) { config.chartEndDate = end_date; }

        return config;
    },
    
    _getStartDate: function() {
        var earliest_pi_start = null,
            release_start = null;
        Ext.Array.each(this.rows, function(pi){
            if ( Ext.isEmpty(pi.get('PlannedStartDate')) ) { return; }
            if ( Ext.isEmpty(earliest_pi_start) ) { earliest_pi_start = pi.get('PlannedStartDate'); }
            if ( earliest_pi_start > pi.get('PlannedStartDate') ) { earliest_pi_start = pi.get('PlannedStartDate'); }
            
        });
        
        var start = null;
        if ( !Ext.isEmpty(earliest_pi_start) ) { start = earliest_pi_start; }
        
        var release = this.down('rallyreleasecombobox') && this.down('rallyreleasecombobox').getRecord();
        if ( !Ext.isEmpty(release) && !Ext.isEmpty(release.get('ReleaseStartDate')) ) {
            release_start = release.get('ReleaseStartDate');
            if ( Ext.isEmpty(start) ) { start = release_start; }
            if ( release_start < start ) { start = release_start; }
        }
                
        return start;
    },
    
    _getEndDate: function() {
        var latest_pi_end = null,
            release_end = null;
        Ext.Array.each(this.rows, function(pi){
            if ( Ext.isEmpty(pi.get('PlannedEndDate')) ) { return; }
            if ( Ext.isEmpty(latest_pi_end) ) { latest_pi_end = pi.get('PlannedStartDate'); }
            if ( latest_pi_end < pi.get('PlannedEndDate') ) { latest_pi_end = pi.get('PlannedEndDate'); }
            
        });
        
        var end = null;
        if ( !Ext.isEmpty(latest_pi_end) ) { end = latest_pi_end; }
        
        var release = this.down('rallyreleasecombobox') && this.down('rallyreleasecombobox').getRecord();
        if ( !Ext.isEmpty(release) && !Ext.isEmpty(release.get('ReleaseDate')) ) {
            release_end = release.get('ReleaseDate');
            if ( Ext.isEmpty(end) ) { end = release_end; }
            if ( release_end > end ) { end = release_end; }
        }
                
        return end;
    },
    
    _showExportMenu: function(button) {
        var menu = Ext.widget({
            xtype: 'rallymenu',
            items: [
                {text:'Deep Export', scope: this, handler: this._deepExport}
            ]
        });
        menu.showBy(button.getEl());
        if(button.toolTip) {
            button.toolTip.hide();
        }
    },
    
    _deepExport: function() {
        var me = this;
        this.logger.log('_deepExport', this.rows);
        
        var rows = Ext.Array.filter(this.rows, function(row){
            return ( row.get('_Level') == 3 );
        });
        // rows are an array of DependencyRow objects
        var exporter = Ext.create('CA.techservices.DeepExporter', {
            records: rows,
            MilestonesByOID: this.MilestonesByOID,
            TypeField: this.type_field,
            PlatformCapabilityField: this.platform_capability_field,
            CapabilityField: this.capability_field,
            BaseType: this._getChildType(this._getParentType())
        });
        
        this.setLoading('Gathering additional data...');
        
        exporter.gatherDescendantInformation().then({
            success: function(results) {
                var export_rows = Ext.Array.flatten(results);
                
                if (  me._getChildType(me._getParentType()) == "portfolioitem/Capability" ) {
                    
                    Ext.Array.each(export_rows, function(row){
                        row.Feature = row.Story && row.Story.Feature;
                    });
                    
                }
                // filter out features that have rows with stories displayed already
                // (because they're duplicate data)
                export_rows = Ext.Array.filter(export_rows, function(row){
                    return ( Ext.isEmpty(row._stories) || row._stories.length === 0 || !Ext.isEmpty(row.Story) );
                });
                exporter.saveCSV(export_rows, "E2E Value Stream_MVP Status.csv");
            }
        }).always(function(){ me.setLoading(false)});
        
    },
    
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    _getOidFromRef: function(ref) {
        var ref_array = ref.replace(/\.js$/,'').split(/\//);
        return ref_array[ref_array.length-1];
    },
    
    getSettingsFields: function() {
        return [{
            name: 'typeField',
            xtype: 'rallyfieldcombobox',
            model: 'PortfolioItem',
            label: 'Type Field:',
            labelWidth: 150,
            _isNotHidden: function(field) {
                if ( field.hidden ) { return false; }
                var defn = field.attributeDefinition;
                if ( Ext.isEmpty(defn) ) { return false; }
                
                return ( defn.Constrained && defn.AttributeType == 'STRING' );
            }
        },
        {
            name: 'platformCapabilityField',
            xtype: 'rallyfieldcombobox',
            model: 'PortfolioItem',
            label: 'Platform Capability Field:',
            labelWidth: 150,
            _isNotHidden: function(field) {
                if ( field.hidden ) { return false; }
                var defn = field.attributeDefinition;
                if ( Ext.isEmpty(defn) ) { return false; }
                
                return ( defn.Constrained && defn.AttributeType == 'STRING' );
            }        
            //
        },
        {
            name: 'capabilityTypeField',
            xtype: 'rallyfieldcombobox',
            model: 'PortfolioItem',
            label: 'Capability Type Field:',
            labelWidth: 150,
            _isNotHidden: function(field) {
                if ( field.hidden ) { return false; }
                var defn = field.attributeDefinition;
                if ( Ext.isEmpty(defn) ) { return false; }
                
                return ( defn.Constrained && defn.AttributeType == 'STRING' );
            }        
            //
        }];
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    }
});

            
               Rally.launchApp('TSDependencyTimeline', {
                   name: 'Dependency Timeline'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

th.ts-timeline-category-cell {
    padding-left: 5px;
    padding-right: 5px;
    padding-top: 8px;
    padding-bottom: 8px;
    display: inline-block;
    background-color: #e6e6e6;
    border: 1px solid #fff;
}

.ts-month-title {
    display: inline-block;
}


.pi-box {
    font: 9px arial, sans-serif !important;
    background-color: #D3D3D3;
    color: black;
    border: 1px solid black;
    padding: 3px;
    margin: 3px;
}

.pi-button {
    font: 16px arial, sans-serif !important;
    background-color: #fff;
    color: black !important;
    border: none;
    margin: 3px;
}


.pi-button.x-btn-default-small .x-btn-inner {
    font: 16px arial, sans-serif !important;
    color: black !important;
}

.pi-delete-button {
    font: 9px arial, sans-serif !important;
    background-color: #fff;
    color: black;
    border: none;
    padding: 3px;
}

.pi-delete-button.x-btn-default-small .x-btn-inner {
    font: 9px arial, sans-serif !important;
    color: black;
}

.x-border-layout-ct {
    background-color: white;
}

.old-ts-timeline-category-cell {
    padding-left: 5px;
    padding-right: 5px;
    overflow: hidden;
    text-overflow: ellipsis;
    display: inline-block;
}

.ts-timeline-category-cell {
    padding-left: 5px;
    padding-right: 5px;
    display: inline-block;
}

.ts-month-title {
    text-align: center;
}
    </style>

</head>
<body></body>
</html>